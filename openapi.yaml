openapi: 3.1.0
info:
  title: OpenAI Relay API
  version: "1.0.0"
  description: BIFL-grade relay with essential OpenAI endpoints
servers:
  - url: https://chatgpt-team-relay.onrender.com

paths:
  /v1/chat/completions:
    post:
      operationId: chatCompletions_create
      summary: Create chat completion
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [model, messages]
              properties:
                model: { type: string }
                messages:
                  type: array
                  items:
                    type: object
                    required: [role, content]
                    properties:
                      role: { type: string, enum: [user, assistant, system, tool] }
                      content: { type: string }
                stream: { type: boolean, default: false }
      responses:
        '200': { description: Chat completion created }

  /v1/embeddings:
    post:
      operationId: embeddings_create
      summary: Create embedding
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [model, input]
              properties:
                model: { type: string }
                input: { type: string }
      responses:
        '200': { description: Embedding created }

  /v1/files:
    post:
      operationId: files_upload
      summary: Upload file
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file: { type: string, format: binary }
      responses:
        '200': { description: File uploaded }
    get:
      operationId: files_list
      summary: List files
      responses:
        '200': { description: File list }

  /v1/files/{file_id}:
    get:
      operationId: files_retrieve
      summary: Get file
      parameters:
        - name: file_id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: File details }
    delete:
      operationId: files_delete
      summary: Delete file
      parameters:
        - name: file_id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: File deleted }

  /v1/images/generations:
    post:
      operationId: images_generate
      summary: Generate image (DALLÂ·E)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [model, prompt]
              properties:
                model: { type: string }
                prompt: { type: string }
                n: { type: integer }
      responses:
        '200': { description: Image created }

  /v1/audio/speech:
    post:
      operationId: audio_tts
      summary: Text to speech
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [model, input]
              properties:
                model: { type: string }
                input: { type: string }
      responses:
        '200': { description: Audio created }

  /v1/audio/transcriptions:
    post:
      operationId: audio_transcribe
      summary: Audio transcription (Whisper)
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file: { type: string, format: binary }
                model: { type: string }
      responses:
        '200': { description: Transcription created }

  /v1/audio/translation:
    post:
      operationId: audio_translate
      summary: Translate audio to English
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file: { type: string, format: binary }
                model: { type: string }
      responses:
        '200': { description: Audio translated }

  /v1/models:
    get:
      operationId: models_list
      summary: List available models
      responses:
        '200': { description: Model list }

  /v1/assistants:
    post:
      operationId: assistants_create
      summary: Create assistant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [model, instructions]
              properties:
                model: { type: string }
                instructions: { type: string }
      responses:
        '200': { description: Assistant created }

  /v1/assistants/{assistant_id}/files:
    get:
      operationId: assistants_list_files
      summary: List files for assistant
      parameters:
        - name: assistant_id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Files for assistant }

  /v1/threads:
    post:
      operationId: threads_create
      summary: Create a new thread
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                messages:
                  type: array
                  items:
                    type: object
                    required: [role, content]
                    properties:
                      role:
                        type: string
                        enum: [user, assistant]
                      content:
                        type: string
      responses:
        '200': { description: Thread created }

  /v1/threads/{thread_id}/messages:
    post:
      operationId: threads_add_message
      summary: Add message to thread
      parameters:
        - name: thread_id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [role, content]
              properties:
                role:
                  type: string
                  enum: [user, assistant]
                content:
                  type: string
      responses:
        '200': { description: Message added }

  /v1/threads/{thread_id}/runs:
    post:
      operationId: threads_create_run
      summary: Create run for thread
      parameters:
        - name: thread_id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                assistant_id: { type: string }
      responses:
        '200': { description: Run created }

  /v1/vector_stores:
    get:
      operationId: vectorStores_list
      summary: List vector stores
      responses:
        '200': { description: Vector store list }
    post:
      operationId: vectorStores_create
      summary: Create vector store
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
      responses:
        '200': { description: Vector store created }

  /v1/vector_stores/{vector_store_id}/queries:
    post:
      operationId: vectorStores_query
      summary: Query vector store
      parameters:
        - name: vector_store_id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query: { type: string }
      responses:
        '200': { description: Vector store queried }

  /v1/videos:
    post:
      operationId: videos_create
      summary: Create a video (Sora)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [prompt]
              properties:
                prompt: { type: string }
                model: { type: string }
      responses:
        '200':
          description: Video job accepted

  /v1/videos/{video_id}:
    get:
      operationId: videos_get
      summary: Get video job status/details
      parameters:
        - name: video_id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Video status/details

  /v1/videos/{video_id}/remix:
    post:
      operationId: videos_remix
      summary: Remix a video job
      parameters:
        - name: video_id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [prompt]
              properties:
                prompt: { type: string }
      responses:
        '200':
          description: Video remix job accepted

components:
  schemas: {}

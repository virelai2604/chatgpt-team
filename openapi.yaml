openapi: 3.1.1
info:
  title: OpenAI Relay API (BIFL Grade, Client-Usable Endpoints)
  version: "1.0.1"

servers:
  - url: https://chatgpt-team-relay.onrender.com/v1

tags:
  - name: Chat
  - name: Completions
  - name: Embeddings
  - name: Images
  - name: Audio
  - name: Assistants
  - name: Threads
  - name: VectorStores
  - name: Tools

paths:
  /chat/completions:
    post:
      operationId: createChatCompletion
      summary: Chat completions (GPT-3.5, GPT-4, GPT-4o, GPT-5)
      tags: [Chat]
      description: Create chat completion (supports streaming).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatCompletionRequest'
      responses:
        '200':
          description: Chat completion result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatCompletionResponse'

  /completions:
    post:
      operationId: createCompletion
      summary: Text completions (legacy/instruct)
      tags: [Completions]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompletionRequest'
      responses:
        '200':
          description: Completion result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompletionResponse'

  /embeddings:
    post:
      operationId: createEmbedding
      summary: Create embeddings
      tags: [Embeddings]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmbeddingRequest'
      responses:
        '200':
          description: Embedding result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddingResponse'

  /images/generations:
    post:
      operationId: createImageGeneration
      summary: Generate image (DALLÂ·E)
      tags: [Images]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageGenerationRequest'
      responses:
        '200':
          description: Image generation result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageGenerationResponse'

  /audio/transcriptions:
    post:
      operationId: createAudioTranscription
      summary: Audio transcription (whisper-1, gpt-4o-transcribe)
      tags: [Audio]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AudioTranscriptionRequest'
      responses:
        '200':
          description: Audio transcription result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AudioTranscriptionResponse'

  /audio/speech:
    post:
      operationId: createSpeech
      summary: Text-to-speech (tts-1, tts-1-hd, gpt-4o)
      tags: [Audio]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TTSRequest'
      responses:
        '200':
          description: TTS result (audio)
          content:
            audio/mpeg:
              schema:
                type: string
                format: binary

  /models:
    get:
      operationId: listModels
      summary: List available models
      tags: [Chat]
      responses:
        '200':
          description: List of models
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelList'

  /assistants:
    get:
      operationId: listAssistants
      summary: List all assistants (Beta v2)
      tags: [Assistants]
      parameters:
        - name: OpenAI-Beta
          in: header
          required: true
          schema:
            type: string
            enum: ["assistants=v2"]
      responses:
        '200':
          description: List of assistants
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssistantList'
    post:
      operationId: createAssistant
      summary: Create assistant (Beta v2)
      tags: [Assistants]
      parameters:
        - name: OpenAI-Beta
          in: header
          required: true
          schema:
            type: string
            enum: ["assistants=v2"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssistantCreateRequest'
      responses:
        '200':
          description: Assistant created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assistant'

  /threads:
    post:
      operationId: createThread
      summary: Create thread
      tags: [Threads]
      parameters:
        - name: OpenAI-Beta
          in: header
          required: true
          schema:
            type: string
            enum: ["assistants=v2"]
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThreadCreateRequest'
      responses:
        '200':
          description: Thread created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thread'

  /threads/{thread_id}:
    get:
      operationId: getThread
      summary: Retrieve thread
      tags: [Threads]
      parameters:
        - name: OpenAI-Beta
          in: header
          required: true
          schema:
            type: string
            enum: ["assistants=v2"]
        - name: thread_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Thread object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thread'

  /vector_stores:
    post:
      operationId: createVectorStore
      summary: Create vector store (Beta)
      tags: [VectorStores]
      parameters:
        - name: OpenAI-Beta
          in: header
          required: true
          schema:
            type: string
            enum: ["assistants=v2"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VectorStoreCreateRequest'
      responses:
        '200':
          description: Vector store created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStore'

  /tools:
    get:
      operationId: listTools
      summary: List tools (Beta)
      tags: [Tools]
      parameters:
        - name: OpenAI-Beta
          in: header
          required: true
          schema:
            type: string
            enum: ["assistants=v2"]
      responses:
        '200':
          description: List of tools
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolList'

components:
  securitySchemes:
    ApiKeyAuth:
      type: http
      scheme: bearer

  schemas:
    # Minimal schemas (just a few for demonstration - you should expand as needed)
    ChatCompletionRequest:
      type: object
      required: [model, messages]
      properties:
        model:
          type: string
        messages:
          type: array
          items:
            type: object
            properties:
              role:
                type: string
              content:
                type: string
    ChatCompletionResponse:
      type: object
      properties:
        id:
          type: string
        object:
          type: string
        choices:
          type: array
          items:
            type: object
            properties:
              message:
                type: object
                properties:
                  role:
                    type: string
                  content:
                    type: string
              finish_reason:
                type: string

    CompletionRequest:
      type: object
      required: [model, prompt]
      properties:
        model:
          type: string
        prompt:
          type: string
    CompletionResponse:
      type: object
      properties:
        id:
          type: string
        object:
          type: string
        choices:
          type: array
          items:
            type: object
            properties:
              text:
                type: string
              finish_reason:
                type: string

    EmbeddingRequest:
      type: object
      required: [model, input]
      properties:
        model:
          type: string
        input:
          type: string
    EmbeddingResponse:
      type: object
      properties:
        object:
          type: string
        data:
          type: array
          items:
            type: object
            properties:
              embedding:
                type: array
                items:
                  type: number

    ImageGenerationRequest:
      type: object
      required: [model, prompt]
      properties:
        model:
          type: string
        prompt:
          type: string
    ImageGenerationResponse:
      type: object
      properties:
        created:
          type: integer
        data:
          type: array
          items:
            type: object
            properties:
              url:
                type: string

    AudioTranscriptionRequest:
      type: object
      required: [file, model]
      properties:
        file:
          type: string
          format: binary
        model:
          type: string
    AudioTranscriptionResponse:
      type: object
      properties:
        text:
          type: string

    TTSRequest:
      type: object
      required: [model, input]
      properties:
        model:
          type: string
        input:
          type: string

    ModelList:
      type: object
      properties:
        object:
          type: string
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: string

    AssistantList:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: string

    AssistantCreateRequest:
      type: object
      properties:
        name:
          type: string
        model:
          type: string

    Assistant:
      type: object
      properties:
        id:
          type: string
        object:
          type: string

    ThreadCreateRequest:
      type: object
      properties:
        metadata:
          type: object

    Thread:
      type: object
      properties:
        id:
          type: string
        object:
          type: string

    VectorStoreCreateRequest:
      type: object
      properties:
        name:
          type: string

    VectorStore:
      type: object
      properties:
        id:
          type: string

    ToolList:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: string

security:
  - ApiKeyAuth: []

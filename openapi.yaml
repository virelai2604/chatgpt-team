openapi: 3.1.0
info:
  title: OpenAI Relay API
  version: "1.0.0"
  description: BIFL-compliant, essential endpoints, streaming for chat/image/video, and correct beta header for assistants/tools.
servers:
  - url: https://chatgpt-team-relay.onrender.com

paths:
  /v1/chat/completions:
    post:
      operationId: chatCompletions_create
      summary: Create chat completion (supports streaming)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [model, messages]
              properties:
                model: { type: string }
                messages:
                  type: array
                  items:
                    type: object
                    required: [role, content]
                    properties:
                      role: { type: string, enum: [user, assistant, system, tool] }
                      content: { type: string }
                stream: { type: boolean, default: false }
      responses:
        '200':
          description: Chat completion created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: { type: string }
                  object: { type: string }
                  created: { type: integer }
                  model: { type: string }
                  choices:
                    type: array
                    items:
                      type: object
                      properties:
                        index: { type: integer }
                        message:
                          type: object
                          properties:
                            role: { type: string }
                            content: { type: string }
                        finish_reason: { type: string }
            text/event-stream:
              schema:
                type: string
                description: Streaming response

  /v1/embeddings:
    post:
      operationId: embeddings_create
      summary: Create embedding
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [model, input]
              properties:
                model: { type: string }
                input: { type: string }
      responses:
        '200': { description: Embedding created }

  /v1/files:
    post:
      operationId: files_upload
      summary: Upload file
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file: { type: string, format: binary }
      responses:
        '200': { description: File uploaded }
    get:
      operationId: files_list
      summary: List files
      responses:
        '200': { description: File list }

  /v1/files/{file_id}:
    get:
      operationId: files_retrieve
      summary: Get file
      parameters:
        - name: file_id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: File details }
    delete:
      operationId: files_delete
      summary: Delete file
      parameters:
        - name: file_id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: File deleted }

  /v1/images/generations:
    post:
      operationId: images_generate
      summary: Generate image (supports relay streaming)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [model, prompt]
              properties:
                model: { type: string }
                prompt: { type: string }
                n: { type: integer }
      responses:
        '200':
          description: Image generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  created: { type: integer }
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        url: { type: string }
                        b64_json: { type: string }
            image/png:
              schema:
                type: string
                format: binary
                description: Streamed image

  /v1/images/{image_id}/content:
    get:
      operationId: images_stream_content
      summary: Stream image file content (relay extension)
      parameters:
        - name: image_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Image file stream
          content:
            image/png:
              schema:
                type: string
                format: binary

  /v1/videos:
    post:
      operationId: videos_create
      summary: Create video (Sora)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [prompt]
              properties:
                prompt: { type: string }
                model: { type: string }
      responses:
        '200': { description: Video created }

  /v1/videos/{video_id}:
    get:
      operationId: videos_get
      summary: Get video status
      parameters:
        - name: video_id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Video status }

  /v1/videos/{video_id}/content:
    get:
      operationId: videos_stream_content
      summary: Stream video file content (relay extension)
      parameters:
        - name: video_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Video file stream
          content:
            video/mp4:
              schema:
                type: string
                format: binary

  /v1/models:
    get:
      operationId: models_list
      summary: List available models
      responses:
        '200': { description: Model list }

  /v1/assistants:
    post:
      operationId: assistants_create
      summary: Create assistant
      parameters:
        - name: OpenAI-Beta
          in: header
          required: true
          schema: { type: string }
          example: assistants=v2
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [model, instructions]
              properties:
                model: { type: string }
                instructions: { type: string }
      responses:
        '200': { description: Assistant created }

  /v1/assistants/{assistant_id}:
    get:
      operationId: assistants_retrieve
      summary: Retrieve assistant details
      parameters:
        - name: assistant_id
          in: path
          required: true
          schema: { type: string }
        - name: OpenAI-Beta
          in: header
          required: true
          schema: { type: string }
          example: assistants=v2
      responses:
        '200': { description: Assistant details }
    patch:
      operationId: assistants_update
      summary: Update assistant
      parameters:
        - name: assistant_id
          in: path
          required: true
          schema: { type: string }
        - name: OpenAI-Beta
          in: header
          required: true
          schema: { type: string }
          example: assistants=v2
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                model: { type: string }
                instructions: { type: string }
      responses:
        '200': { description: Assistant updated }
    delete:
      operationId: assistants_delete
      summary: Delete assistant
      parameters:
        - name: assistant_id
          in: path
          required: true
          schema: { type: string }
        - name: OpenAI-Beta
          in: header
          required: true
          schema: { type: string }
          example: assistants=v2
      responses:
        '200': { description: Assistant deleted }

  /v1/assistants/{assistant_id}/files:
    get:
      operationId: assistants_list_files
      summary: List assistant files
      parameters:
        - name: assistant_id
          in: path
          required: true
          schema: { type: string }
        - name: OpenAI-Beta
          in: header
          required: true
          schema: { type: string }
          example: assistants=v2
      responses:
        '200': { description: Files for assistant }
    post:
      operationId: assistants_attach_file
      summary: Attach file to assistant
      parameters:
        - name: assistant_id
          in: path
          required: true
          schema: { type: string }
        - name: OpenAI-Beta
          in: header
          required: true
          schema: { type: string }
          example: assistants=v2
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [file_id]
              properties:
                file_id: { type: string }
      responses:
        '200': { description: File attached }
    delete:
      operationId: assistants_remove_file
      summary: Remove file from assistant
      parameters:
        - name: assistant_id
          in: path
          required: true
          schema: { type: string }
        - name: OpenAI-Beta
          in: header
          required: true
          schema: { type: string }
          example: assistants=v2
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [file_id]
              properties:
                file_id: { type: string }
      responses:
        '200': { description: File removed }

  /v1/threads:
    post:
      operationId: threads_create
      summary: Create thread
      parameters:
        - name: OpenAI-Beta
          in: header
          required: true
          schema: { type: string }
          example: assistants=v2
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                messages:
                  type: array
                  items:
                    type: object
                    required: [role, content]
                    properties:
                      role: { type: string, enum: [user, assistant] }
                      content: { type: string }
                metadata:
                  type: object
                  additionalProperties: true
                  properties: {}
      responses:
        '200': { description: Thread created }

  /v1/threads/{thread_id}/messages:
    get:
      operationId: threads_list_messages
      summary: List messages in a thread
      parameters:
        - name: thread_id
          in: path
          required: true
          schema: { type: string }
        - name: OpenAI-Beta
          in: header
          required: true
          schema: { type: string }
          example: assistants=v2
      responses:
        '200': { description: Messages in thread }
    post:
      operationId: threads_add_message
      summary: Add message
      parameters:
        - name: thread_id
          in: path
          required: true
          schema: { type: string }
        - name: OpenAI-Beta
          in: header
          required: true
          schema: { type: string }
          example: assistants=v2
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [role, content]
              properties:
                role: { type: string, enum: [user, assistant] }
                content: { type: string }
      responses:
        '200': { description: Message added }

  /v1/threads/{thread_id}/messages/{message_id}:
    get:
      operationId: threads_get_message
      summary: Get a specific message in a thread
      parameters:
        - name: thread_id
          in: path
          required: true
          schema: { type: string }
        - name: message_id
          in: path
          required: true
          schema: { type: string }
        - name: OpenAI-Beta
          in: header
          required: true
          schema: { type: string }
          example: assistants=v2
      responses:
        '200': { description: Message retrieved }

  /v1/threads/{thread_id}/runs:
    post:
      operationId: threads_create_run
      summary: Create run
      parameters:
        - name: thread_id
          in: path
          required: true
          schema: { type: string }
        - name: OpenAI-Beta
          in: header
          required: true
          schema: { type: string }
          example: assistants=v2
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                assistant_id: { type: string }
      responses:
        '200': { description: Run created }

  /v1/threads/{thread_id}/runs/{run_id}:
    get:
      operationId: threads_get_run
      summary: Get run status for a thread
      parameters:
        - name: thread_id
          in: path
          required: true
          schema: { type: string }
        - name: run_id
          in: path
          required: true
          schema: { type: string }
        - name: OpenAI-Beta
          in: header
          required: true
          schema: { type: string }
          example: assistants=v2
      responses:
        '200': { description: Run retrieved }

  /v1/vector_stores:
    get:
      operationId: vectorStores_list
      summary: List vector stores
      parameters:
        - name: OpenAI-Beta
          in: header
          required: true
          schema: { type: string }
          example: assistants=v2
      responses:
        '200': { description: Vector stores listed }
    post:
      operationId: vectorStores_create
      summary: Create vector store
      parameters:
        - name: OpenAI-Beta
          in: header
          required: true
          schema: { type: string }
          example: assistants=v2
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
      responses:
        '200': { description: Vector store created }

  /v1/tools:
    get:
      operationId: tools_list
      summary: List tools (beta)
      parameters:
        - name: OpenAI-Beta
          in: header
          required: true
          schema: { type: string }
          example: assistants=v2
      responses:
        '200': { description: Tools listed }
    post:
      operationId: tools_create
      summary: Register new tool (beta)
      parameters:
        - name: OpenAI-Beta
          in: header
          required: true
          schema: { type: string }
          example: assistants=v2
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                description: { type: string }
      responses:
        '200': { description: Tool registered }

components:
  schemas: {}

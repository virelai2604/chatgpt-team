openapi: 3.1.1
info:
  title: BIFL AI Relay API
  version: 1.0.0
  description: >
    Modern OpenAI-compatible relay API, v2/Assistants/tools-first, 30 operations only.
    /v1/audio/translation removed. "tools" replaces v1 function/retrieval/code_interpreter flows.
servers:
  - url: https://chatgpt-team-relay.onrender.com

components:
  schemas:
    File:
      type: object
      properties:
        id: { type: string }
        object: { type: string }
        bytes: { type: integer }
        created_at: { type: integer }
        filename: { type: string }
        purpose: { type: string }
    Model:
      type: object
      properties:
        id: { type: string }
        object: { type: string }
        created: { type: integer }
        owned_by: { type: string }
    Tool:
      type: object
      required: [type]
      properties:
        type:
          type: string
          enum: [function, retrieval, code_interpreter]
        function:
          $ref: '#/components/schemas/FunctionTool'
    FunctionTool:
      type: object
      required: [name, description, parameters]
      properties:
        name:
          type: string
        description:
          type: string
        parameters:
          type: object
    Message:
      type: object
      properties:
        id: { type: string }
        object: { type: string }
        created_at: { type: integer }
        thread_id: { type: string }
        role: { type: string }
        content: { type: string }
    Assistant:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        model: { type: string }
        tools:
          type: array
          items:
            $ref: '#/components/schemas/Tool'

paths:
  /v1/chat/completions:
    post:
      summary: Chat with model (supports tools)
      operationId: chatCompletions
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                model: { type: string }
                messages:
                  type: array
                  items: { type: object }
                tools:
                  type: array
                  items:
                    $ref: '#/components/schemas/Tool'
              required: [model, messages]
      responses:
        '200':
          description: OK

  /v1/embeddings:
    post:
      summary: Generate embeddings
      operationId: createEmbedding
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                model: { type: string }
                input: { type: string }
              required: [model, input]
      responses:
        '200':
          description: OK

  /v1/files:
    get:
      summary: List files
      operationId: listFiles
      responses:
        '200': { description: OK }
    post:
      summary: Upload a file
      operationId: uploadFile
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file: { type: string, format: binary }
                purpose: { type: string }
      responses:
        '200': { description: OK }

  /v1/files/{file_id}:
    get:
      summary: Retrieve file
      operationId: getFile
      parameters:
        - in: path
          name: file_id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
    delete:
      summary: Delete file
      operationId: deleteFile
      parameters:
        - in: path
          name: file_id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }

  /v1/images/generations:
    post:
      summary: Generate an image
      operationId: generateImage
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                prompt: { type: string }
              required: [prompt]
      responses:
        '200': { description: OK }

  /v1/images/{image_id}/content:
    get:
      summary: Download image content
      operationId: getImageContent
      parameters:
        - in: path
          name: image_id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }

  /v1/audio/speech:
    post:
      summary: Text to speech
      operationId: audioSpeech
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                input: { type: string }
              required: [input]
      responses:
        '200': { description: OK }

  /v1/audio/transcriptions:
    post:
      summary: Audio transcription (with language param for translation)
      operationId: audioTranscriptions
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file: { type: string, format: binary }
                language: { type: string, description: "ISO code, e.g. 'en', 'fr', 'zh'" }
      responses:
        '200': { description: OK }

  /v1/models:
    get:
      summary: List models
      operationId: listModels
      responses:
        '200': { description: OK }

  /v1/assistants:
    post:
      summary: Create an assistant (register tools)
      operationId: createAssistant
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                model: { type: string }
                tools:
                  type: array
                  items:
                    $ref: '#/components/schemas/Tool'
      responses:
        '200': { description: OK }

  /v1/assistants/{assistant_id}/files:
    get:
      summary: List assistant files
      operationId: getAssistantFiles
      parameters:
        - in: path
          name: assistant_id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
    post:
      summary: Attach file to assistant
      operationId: attachAssistantFile
      parameters:
        - in: path
          name: assistant_id
          required: true
          schema: { type: string }
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file: { type: string, format: binary }
      responses:
        '200': { description: OK }

  /v1/threads:
    post:
      summary: Create thread
      operationId: createThread
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                messages:
                  type: array
                  items: { type: object }
              required: [messages]
      responses:
        '200': { description: OK }

  /v1/threads/{thread_id}/messages:
    post:
      summary: Add message to thread
      operationId: addMessageToThread
      parameters:
        - in: path
          name: thread_id
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                role: { type: string }
                content: { type: string }
              required: [role, content]
      responses:
        '200': { description: OK }
    get:
      summary: Get all messages from thread
      operationId: getThreadMessages
      parameters:
        - in: path
          name: thread_id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }

  /v1/threads/{thread_id}/messages/{message_id}:
    get:
      summary: Get message by ID
      operationId: getMessageById
      parameters:
        - in: path
          name: thread_id
          required: true
          schema: { type: string }
        - in: path
          name: message_id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }

  /v1/threads/{thread_id}/runs:
    post:
      summary: Create a run
      operationId: createRun
      parameters:
        - in: path
          name: thread_id
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                assistant_id:
                  type: string
                  description: Assistant to use for the run
                instructions:
                  type: string
                  description: (Optional) Extra instructions for this run
                tools:
                  type: array
                  description: (Optional) Tool overrides for this run
                  items:
                    $ref: '#/components/schemas/Tool'
                metadata:
                  type: object
                  description: (Optional) Arbitrary metadata
              required: [assistant_id]
      responses:
        '200': { description: OK }

  /v1/threads/{thread_id}/runs/{run_id}/steps:
    get:
      summary: List run steps
      operationId: getRunSteps
      parameters:
        - in: path
          name: thread_id
          required: true
          schema: { type: string }
        - in: path
          name: run_id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }

  /v1/vector_stores:
    get:
      summary: List vector stores
      operationId: listVectorStores
      responses:
        '200': { description: OK }
    post:
      summary: Create vector store
      operationId: createVectorStore
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
      responses:
        '200': { description: OK }

  /v1/videos:
    get:
      summary: List videos
      operationId: listVideos
      responses:
        '200': { description: OK }
    post:
      summary: Create a video
      operationId: createVideo
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                prompt: { type: string }
                seconds: { type: string }
              required: [prompt, seconds]
      responses:
        '200': { description: OK }

  /v1/videos/{video_id}:
    get:
      summary: Get video by ID
      operationId: getVideoById
      parameters:
        - in: path
          name: video_id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
    delete:
      summary: Delete video
      operationId: deleteVideo
      parameters:
        - in: path
          name: video_id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }

  /v1/videos/{video_id}/content:
    get:
      summary: Get video content
      operationId: getVideoContent
      parameters:
        - in: path
          name: video_id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }

  /v1/videos/{video_id}/remix:
    post:
      summary: Remix a video
      operationId: remixVideo
      parameters:
        - in: path
          name: video_id
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                remix_prompt: { type: string }
              required: [remix_prompt]
      responses:
        '200': { description: OK }

  /v1/tools:
    get:
      summary: List all registered tools
      operationId: listTools
      responses:
        '200':
          description: OK
    post:
      summary: Register a new tool (function, retrieval, or code_interpreter)
      operationId: registerTool
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tool'
      responses:
        '200':
          description: OK

  
openapi: 3.1.1
info:
  title: OpenAI Platform Relay API
  version: "2025-10"
  description: |
    A minimal, streaming-compatible OpenAI-style API proxy that mirrors core OpenAI endpoints.
    Includes unified `/responses` endpoint, tool registration, and extended developer ergonomics.
  contact:
    name: ChatGPT Team Relay
    url: https://chatgpt-team-relay.onrender.com
    email: support@team-relay.example.com

servers:
  - url: https://chatgpt-team-relay.onrender.com
    description: Primary Relay Server

tags:
  - name: Chat
    description: Chat and conversational model completions
  - name: Responses
    description: Unified endpoint for multimodal responses
  - name: Embeddings
    description: Text embeddings and similarity representations
  - name: Images
    description: Image generation (DALL·E)
  - name: Audio
    description: Audio transcription (Whisper) and speech (TTS)
  - name: Video
    description: Video generation (Sora)
  - name: Files
    description: File upload, listing, retrieval, and deletion
  - name: Vector Stores
    description: Vector database creation and query endpoints
  - name: Models
    description: Model discovery and management
  - name: Tools
    description: Custom tool registration and listing

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # ------------------------------------------
    # Core Schemas
    # ------------------------------------------
    ChatMessage:
      type: object
      required: [role, content]
      properties:
        role:
          type: string
          enum: [system, user, assistant, tool]
        content:
          type: string
          description: Message text or structured content

    ChatCompletionInput:
      type: object
      required: [model, messages]
      properties:
        model: { type: string, description: "The model to use (e.g., gpt-4o, gpt-5)" }
        messages:
          type: array
          items: { $ref: "#/components/schemas/ChatMessage" }
        stream: { type: boolean, description: "Whether to stream output tokens" }
        temperature: { type: number, description: "Sampling temperature (0–2)", default: 1.0 }
        top_p: { type: number, description: "Nucleus sampling probability (0–1)", default: 1.0 }
        max_tokens: { type: integer, description: "Maximum tokens to generate" }
        tools:
          type: array
          items: { $ref: "#/components/schemas/Tool" }

    ChatCompletionResponse:
      type: object
      properties:
        id: { type: string }
        object: { type: string }
        created: { type: integer }
        model: { type: string }
        choices:
          type: array
          items:
            type: object
            properties:
              index: { type: integer }
              message: { $ref: "#/components/schemas/ChatMessage" }
              finish_reason: { type: string }
        usage:
          type: object
          properties:
            prompt_tokens: { type: integer }
            completion_tokens: { type: integer }
            total_tokens: { type: integer }

    ResponsesInput:
      type: object
      required: [model, input]
      properties:
        model: { type: string }
        input:
          oneOf:
            - type: string
            - type: array
              items: { $ref: "#/components/schemas/ChatMessage" }
        tools:
          type: array
          items: { $ref: "#/components/schemas/Tool" }
        files:
          type: array
          items: { type: string }
        instructions: { type: string }
        previous_response_id: { type: string }
        stream: { type: boolean }

    EmbeddingsInput:
      type: object
      required: [model, input]
      properties:
        model: { type: string }
        input: { type: string }

    ImageGenerationInput:
      type: object
      required: [prompt, model]
      properties:
        prompt: { type: string }
        model: { type: string }

    AudioTranscriptionInput:
      type: object
      required: [file, model]
      properties:
        file: { type: string, format: binary }
        model: { type: string }
        language: { type: string }

    AudioSpeechInput:
      type: object
      required: [input, model, voice]
      properties:
        input: { type: string }
        model: { type: string }
        voice: { type: string }

    VideoCreationInput:
      type: object
      required: [prompt, model]
      properties:
        prompt: { type: string }
        seconds: { type: string }
        model: { type: string }

    VideoRemixInput:
      type: object
      required: [prompt]
      properties:
        prompt: { type: string }

    FileUploadInput:
      type: object
      required: [file]
      properties:
        file: { type: string, format: binary }
        purpose: { type: string }
        metadata: { type: object, additionalProperties: true }
        tags: { type: array, items: { type: string } }

    VectorStoreInput:
      type: object
      required: [name]
      properties:
        name: { type: string }

    VectorStoreQueryInput:
      type: object
      required: [query]
      properties:
        query: { type: string }

    Tool:
      type: object
      required: [type]
      properties:
        type:
          type: string
          enum:
            - file_search
            - retrieval
            - code_interpreter
            - web_search
            - image_generation
            - function
            - browser
        function:
          type: object
          properties:
            name: { type: string }
            description: { type: string }
            parameters: { type: object, additionalProperties: true }

# ------------------------------------------
# Paths
# ------------------------------------------
paths:
  /v1/chat/completions:
    post:
      operationId: createChatCompletion
      tags: [Chat]
      summary: Chat with model (stream/tools)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ChatCompletionInput" }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ChatCompletionResponse" }

  /v1/responses:
    post:
      operationId: createResponse
      tags: [Responses]
      summary: Unified conversational/tool endpoint (stream/tools)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ResponsesInput" }
      responses:
        "200": { description: OK }

  /v1/embeddings:
    post:
      operationId: createEmbedding
      tags: [Embeddings]
      summary: Text embeddings
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/EmbeddingsInput" }
      responses:
        "200": { description: OK }

  /v1/images/generations:
    post:
      operationId: generateImage
      tags: [Images]
      summary: Generate image (DALL·E)
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ImageGenerationInput" }
      responses:
        "200": { description: OK }

  /v1/audio/transcriptions:
    post:
      operationId: transcribeAudio
      tags: [Audio]
      summary: Audio transcription (Whisper)
      requestBody:
        content:
          multipart/form-data:
            schema: { $ref: "#/components/schemas/AudioTranscriptionInput" }
      responses:
        "200": { description: OK }

  /v1/audio/speech:
    post:
      operationId: generateSpeech
      tags: [Audio]
      summary: Text-to-speech (TTS-1)
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/AudioSpeechInput" }
      responses:
        "200": { description: OK }

  /v1/videos:
    post:
      operationId: createVideo
      tags: [Video]
      summary: Video generation (Sora)
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/VideoCreationInput" }
      responses:
        "200": { description: OK }

  /v1/videos/{video_id}:
    get:
      operationId: retrieveVideo
      tags: [Video]
      summary: Retrieve a video job's metadata and status
      parameters:
        - in: path
          name: video_id
          required: true
          schema: { type: string }
      responses:
        "200": { description: OK }

  /v1/videos/{video_id}/remix:
    post:
      operationId: remixVideo
      tags: [Video]
      summary: Remix Sora video
      parameters:
        - in: path
          name: video_id
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/VideoRemixInput" }
      responses:
        "200": { description: OK }

  /v1/files:
    get:
      operationId: listFiles
      tags: [Files]
      summary: List files
      parameters:
        - name: limit
          in: query
          schema: { type: integer, default: 20 }
        - name: after
          in: query
          schema: { type: string }
      responses:
        "200": { description: OK }

    post:
      operationId: uploadFile
      tags: [Files]
      summary: Upload file
      requestBody:
        content:
          multipart/form-data:
            schema: { $ref: "#/components/schemas/FileUploadInput" }
      responses:
        "200": { description: OK }

  /v1/files/{file_id}:
    get:
      operationId: getFile
      tags: [Files]
      summary: Get file
      parameters:
        - name: file_id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200": { description: OK }

    delete:
      operationId: deleteFile
      tags: [Files]
      summary: Delete file
      parameters:
        - name: file_id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200": { description: OK }

  /v1/vector_stores:
    get:
      operationId: listVectorStores
      tags: [Vector Stores]
      summary: List vector stores
      responses:
        "200": { description: OK }

    post:
      operationId: createVectorStore
      tags: [Vector Stores]
      summary: Create vector store (retrieval)
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/VectorStoreInput" }
      responses:
        "200": { description: OK }

  /v1/vector_stores/{vector_store_id}/queries:
    post:
      operationId: queryVectorStore
      tags: [Vector Stores]
      summary: Query vector store
      parameters:
        - name: vector_store_id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/VectorStoreQueryInput" }
      responses:
        "200": { description: OK }

  /v1/models:
    get:
      operationId: listModels
      tags: [Models]
      summary: List models
      responses:
        "200": { description: OK }

  /v1/models/{model_id}:
    get:
      operationId: getModel
      tags: [Models]
      summary: Get model
      parameters:
        - name: model_id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200": { description: OK }

  /v1/tools:
    get:
      operationId: listTools
      tags: [Tools]
      summary: List all registered tools (Assistants v2)
      responses:
        "200": { description: OK }

    post:
      operationId: registerTool
      tags: [Tools]
      summary: Register a new tool (function, retrieval, code_interpreter, file_search, etc.)
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Tool" }
      responses:
        "200": { description: OK }

openapi: 3.1.0
info:
  title: OpenAI Relay Proxy API
  version: "2025-10"


servers:
  - url: https://chatgpt-team-relay.onrender.com
  

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    OpenAIBeta:
      type: apiKey
      in: header
      name: OpenAI-Beta
      description: Required for v2 endpoints (assistants, threads, vector_stores)

  schemas:
    ChatMessage:
      type: object
      required:
        - role
        - content
      properties:
        role:
          type: string
          enum:
            - system
            - user
            - assistant
            - tool
        content:
          type: string

    Tool:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - file_search
            - retrieval
            - code_interpreter
            - web_search
            - image_generation
            - function
        function:
          type: object
          properties:
            name:
              type: string
            description:
              type: string
            parameters:
              type: object

    AssistantV2:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        model:
          type: string
        instructions:
          type: string
        tools:
          type: array
          items:
            $ref: "#/components/schemas/Tool"

    Thread:
      type: object
      properties:
        id:
          type: string
        created_at:
          type: integer
        messages:
          type: array
          items:
            $ref: "#/components/schemas/ChatMessage"

    Run:
      type: object
      properties:
        id:
          type: string
        thread_id:
          type: string
        status:
          type: string

    RunStep:
      type: object
      properties:
        id:
          type: string
        run_id:
          type: string
        type:
          type: string
        status:
          type: string

    ResponsesInput:
      type: object
      required:
        - model
        - input
      properties:
        model:
          type: string
        input:
          anyOf:
            - type: string
            - type: array
              items:
                $ref: "#/components/schemas/ChatMessage"
        tools:
          type: array
          items:
            $ref: "#/components/schemas/Tool"
        files:
          type: array
          items:
            type: string
        stream:
          type: boolean

    VideoMetadata:
      type: object
      properties:
        id:
          type: string
        object:
          type: string
        status:
          type: string
        result:
          type: object
          properties:
            url:
              type: string
              format: uri
            mime_type:
              type: string
            size:
              type: integer

paths:
  /v1/responses:
    post:
      operationId: createResponse
      summary: Unified multimodal response endpoint
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResponsesInput"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object

  /v1/assistants:
    get:
      operationId: listAssistants
      summary: List assistants (v2)
      description: Requires header `OpenAI-Beta: assistants=v2`
      tags:
        - Assistants
      responses:
        "200":
          description: Success — returns a list of assistants
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AssistantV2"
        "401":
          description: Unauthorized / missing token
        "403":
          description: Forbidden — missing or invalid `OpenAI-Beta` header
    post:
      operationId: createAssistant
      summary: Create assistant (v2)
      description: Requires header `OpenAI-Beta: assistants=v2`
      tags:
        - Assistants
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssistantV2"
      responses:
        "200":
          description: Assistant created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssistantV2"
    patch:
      operationId: updateAssistant
      summary: Update assistant (v2)
      description: Requires header `OpenAI-Beta: assistants=v2`
      tags:
        - Assistants
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssistantV2"
      responses:
        "200":
          description: Assistant updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssistantV2"

  /v1/threads:
    post:
      operationId: createThread
      summary: Create new thread (v2)
      tags:
        - Threads
      responses:
        "200":
          description: Thread created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Thread"
    get:
      operationId: listThreads
      summary: List threads (v2)
      tags:
        - Threads
      responses:
        "200":
          description: Success — list of threads
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "##/components/schemas/Thread"

  /v1/threads/{thread_id}/messages:
    post:
      operationId: addThreadMessage
      summary: Add message to thread
      tags:
        - Threads
      parameters:
        - name: thread_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChatMessage"
      responses:
        "200":
          description: Message appended
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatMessage"
    get:
      operationId: listThreadMessages
      summary: List messages in a thread
      tags:
        - Threads
      parameters:
        - name: thread_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success — list of messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ChatMessage"

  /v1/threads/{thread_id}/runs:
    post:
      operationId: createThreadRun
      summary: Create a run for a thread
      tags:
        - Threads
      parameters:
        - name: thread_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Run created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Run"
    get:
      operationId: listThreadRuns
      summary: List runs of a thread
      tags:
        - Threads
      parameters:
        - name: thread_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success — list of runs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Run"

  /v1/threads/{thread_id}/runs/{run_id}/steps:
    get:
      operationId: listRunSteps
      summary: List run steps
      tags:
        - Threads
      parameters:
        - name: thread_id
          in: path
          required: true
          schema:
            type: string
        - name: run_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success — steps list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RunStep"

  /v1/vector_stores:
    get:
      operationId: listVectorStores
      summary: List vector stores
      description: Requires header `OpenAI-Beta: assistants=v2`
      tags:
        - Vector Stores
      responses:
        "200":
          description: Success — list vector stores
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
    post:
      operationId: createVectorStore
      summary: Create a vector store
      description: Requires header `OpenAI-Beta: assistants=v2`
      tags:
        - Vector Stores
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: Vector store created
          content:
            application/json:
              schema:
                type: object

  /v1/vector_stores/{vector_store_id}/queries:
    post:
      operationId: queryVectorStore
      summary: Query a vector store
      tags:
        - Vector Stores
      parameters:
        - name: vector_store_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: Query result
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object

  /v1/files:
    get:
      operationId: listFiles
      summary: List files
      tags:
        - Files
      responses:
        "200":
          description: Success — list of file objects
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
    post:
      operationId: uploadFile
      summary: Upload file
      tags:
        - Files
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                purpose:
                  type: string
      responses:
        "200":
          description: File uploaded
          content:
            application/json:
              schema:
                type: object

  /v1/files/{file_id}:
    get:
      operationId: retrieveFile
      summary: Retrieve file metadata
      tags:
        - Files
      parameters:
        - name: file_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success — file metadata
          content:
            application/json:
              schema:
                type: object
    delete:
      operationId: deleteFile
      summary: Delete a file
      tags:
        - Files
      parameters:
        - name: file_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: File deleted

  /v1/models:
    get:
      operationId: listModels
      summary: List available models
      tags:
        - Models
      responses:
        "200":
          description: Success — list of models
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object

  /v1/completions:
    post:
      operationId: legacyCompletions
      deprecated: true
      summary: Legacy completions endpoint
      description: Superseded by `/v1/responses`
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object

  /v1/videos/{video_id}:
    get:
      operationId: retrieveVideo
      summary: Retrieve metadata or status of video
      tags:
        - Video
      parameters:
        - name: video_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Video metadata / status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VideoMetadata"
        "404":
          description: Video resource not found

  /v1/videos/{video_id}/content:
    get:
      operationId: getVideoContent
      summary: Download video binary content
      tags:
        - Video
      parameters:
        - name: video_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Video b

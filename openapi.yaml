openapi: 3.1.1
info:
  title: OpenAI Platform API (Minimal, Streaming, No Webhook)
  version: "2025-10"
servers:
  - url: https://chatgpt-team-relay.onrender.com/v1
paths:
  /v1/chat/completions:
    post:
      operationId: createChatCompletion
      summary: Chat with model (stream/tools)
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ChatCompletionInput" }
      responses:
        '200': { description: OK }
        '400': { description: Bad input }
        '401': { description: Unauthorized }

  /v1/responses:
    post:
      operationId: createResponse
      summary: Unified conversational/tool endpoint (stream/tools)
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ResponsesInput" }
      responses:
        '200': { description: OK }
        '400': { description: Bad input }
        '401': { description: Unauthorized }

  /v1/embeddings:
    post:
      operationId: createEmbedding
      summary: Text embeddings
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/EmbeddingsInput" }
      responses:
        '200': { description: OK }
        '400': { description: Bad input }

  /v1/images/generations:
    post:
      operationId: generateImage
      summary: Generate image (DALLÂ·E)
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ImageGenerationInput" }
      responses:
        '200': { description: OK }

  /v1/audio/transcriptions:
    post:
      operationId: transcribeAudio
      summary: Audio transcription (Whisper)
      requestBody:
        content:
          multipart/form-data:
            schema: { $ref: "#/components/schemas/AudioTranscriptionInput" }
      responses:
        '200': { description: OK }

  /v1/audio/speech:
    post:
      operationId: generateSpeech
      summary: Text-to-speech (TTS-1)
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/AudioSpeechInput" }
      responses:
        '200': { description: OK }

  /v1/videos:
    post:
      operationId: createVideo
      summary: Video generation (Sora)
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/VideoCreationInput" }
      responses:
        '200': { description: OK }

  /v1/videos/{video_id}/remix:
    post:
      operationId: remixVideo
      summary: Remix Sora video
      parameters:
        - in: path
          name: video_id
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/VideoRemixInput" }
      responses:
        '200': { description: OK }

  /v1/videos/{video_id}/content:
    get:
      operationId: downloadVideoContent
      summary: Download video
      parameters:
        - in: path
          name: video_id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }

  /v1/files:
    post:
      operationId: uploadFile
      summary: Upload file
      requestBody:
        content:
          multipart/form-data:
            schema: { $ref: "#/components/schemas/FileUploadInput" }
      responses:
        '200': { description: OK }
    get:
      operationId: listFiles
      summary: List files
      responses:
        '200': { description: OK }

  /v1/files/{file_id}:
    get:
      operationId: getFile
      summary: Get file
      parameters:
        - name: file_id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
    delete:
      operationId: deleteFile
      summary: Delete file
      parameters:
        - name: file_id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }

  /v1/vector_stores:
    post:
      operationId: createVectorStore
      summary: Create vector store (retrieval)
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/VectorStoreInput" }
      responses:
        '200': { description: OK }
    get:
      operationId: listVectorStores
      summary: List vector stores
      responses:
        '200': { description: OK }

  /v1/vector_stores/{vector_store_id}/queries:
    post:
      operationId: queryVectorStore
      summary: Query vector store
      parameters:
        - name: vector_store_id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/VectorStoreQueryInput" }
      responses:
        '200': { description: OK }

  /v1/models:
    get:
      operationId: listModels
      summary: List models
      responses:
        '200': { description: OK }
  /v1/models/{model_id}:
    get:
      operationId: getModel
      summary: Get model
      parameters:
        - name: model_id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }

  /v1/tools:
    get:
      operationId: listTools
      summary: List all registered tools (Assistants v2)
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }
    post:
      operationId: registerTool
      summary: Register a new tool (function, retrieval, code_interpreter, file_search, etc.)
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Tool"
      responses:
        '200': { description: OK }
        '400': { description: Invalid input }
        '401': { description: Unauthorized }  

components:
  schemas:
    ChatCompletionInput:
      type: object
      properties:
        model: { type: string }
        messages: { type: array, items: { type: object } }
        stream: { type: boolean }
        tools: { type: array, items: { $ref: "#/components/schemas/Tool" } }

    ResponsesInput:
      type: object
      properties:
        model: { type: string }
        input: { type: string }
        tools: { type: array, items: { $ref: "#/components/schemas/Tool" } }
        files: { type: array, items: { type: string } }
        instructions: { type: string }
        previous_response_id: { type: string }
        stream: { type: boolean }

    EmbeddingsInput:
      type: object
      properties:
        model: { type: string }
        input: { type: string }

    ImageGenerationInput:
      type: object
      properties:
        prompt: { type: string }
        model: { type: string }

    AudioTranscriptionInput:
      type: object
      properties:
        file: { type: string, format: binary }
        model: { type: string }
        language: { type: string }

    AudioSpeechInput:
      type: object
      properties:
        input: { type: string }
        model: { type: string }
        voice: { type: string }

    VideoCreationInput:
      type: object
      properties:
        prompt: { type: string }
        seconds: { type: string }
        model: { type: string }

    VideoRemixInput:
      type: object
      properties:
        prompt: { type: string }

    FileUploadInput:
      type: object
      properties:
        file: { type: string, format: binary }
        purpose: { type: string }

    VectorStoreInput:
      type: object
      properties:
        name: { type: string }

    VectorStoreQueryInput:
      type: object
      properties:
        query: { type: string }
    
    Tool:
      type: object
      required: [type]
      properties:
        type:
          type: string
          enum:
            - file_search
            - retrieval
            - code_interpreter
            - web_search
            - image_generation
            - function
            - browser  # (org/beta only; comment out unless private/internal use)
        function:
          type: object
          description: For custom function tools, specify name, description, and parameters.
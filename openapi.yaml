openapi: 3.1.0
info:
  title: ChatGPT Team Relay (BIFL Surface)
  version: "2025-10-23"
  description: >
    OpenAI-compatible relay exposing the unified /v1/responses interface plus Files/Uploads,
    Images, Audio, Vector Stores (assistants=v2 beta upstream), Models (list), and lightweight
    health/status. Legacy/sunset endpoints are not included.

servers:
  - url: https://chatgpt-team-relay.onrender.com
  - url: http://localhost:8000

tags:
  - name: Health
  - name: Relay
  - name: Responses
  - name: Models
  - name: Files
  - name: Uploads
  - name: Images
  - name: Audio
  - name: Vector Stores

paths:
  /v1/health:
    get:
      tags: [Health]
      summary: Liveness probe
      operationId: getHealth
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Health"

  /v1/relay/status:
    get:
      tags: [Relay]
      summary: Relay status / diagnostics
      operationId: getRelayStatus
      responses:
        "200":
          description: Status payload
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericObject"

  # === Unified Responses API (preferred) ===
  /v1/responses:
    post:
      tags: [Responses]
      summary: Create a model response (text/JSON, optional tools, optional streaming)
      description: >
        Unified endpoint for chat/completions/function-calls; supports SSE/NDJSON streaming.
      operationId: createResponse
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GenericObject"
      responses:
        "200":
          description: Non-stream JSON result or streaming events (SSE/NDJSON).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericObject"
            text/event-stream:
              schema:
                type: string
                description: SSE stream
            application/x-ndjson:
              schema:
                type: string
                description: NDJSON stream

  /v1/responses/{response_id}:
    get:
      tags: [Responses]
      summary: Get a model response by id
      operationId: getResponse
      parameters:
        - in: path
          name: response_id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Response object or stream
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericObject"
            text/event-stream:
              schema:
                type: string
    delete:
      tags: [Responses]
      summary: Delete a model response by id
      operationId: deleteResponse
      parameters:
        - in: path
          name: response_id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericObject"

  /v1/responses/{response_id}/cancel:
    post:
      tags: [Responses]
      summary: Cancel a background response
      operationId: cancelResponse
      parameters:
        - in: path
          name: response_id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Cancelled
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericObject"

  # === Models (list only) ===
  /v1/models:
    get:
      tags: [Models]
      summary: List available models
      operationId: listModels
      responses:
        "200":
          description: Model list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericObject"

  # === Files & Uploads ===
  /v1/files:
    get:
      tags: [Files]
      summary: List files
      operationId: listFiles
      responses:
        "200":
          description: Files
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericObject"
    post:
      tags: [Files]
      summary: Upload a file (single-part)
      operationId: createFile
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                purpose:
                  type: string
              additionalProperties: true
      responses:
        "200":
          description: File created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericObject"

  /v1/files/{file_id}:
    get:
      tags: [Files]
      summary: Retrieve file metadata
      operationId: getFile
      parameters:
        - in: path
          name: file_id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: File object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericObject"
    delete:
      tags: [Files]
      summary: Delete a file
      operationId: deleteFile
      parameters:
        - in: path
          name: file_id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericObject"

  /v1/files/{file_id}/content:
    get:
      tags: [Files]
      summary: Download file content
      operationId: getFileContent
      parameters:
        - in: path
          name: file_id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Raw file bytes
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary

  # New multi-part upload flow
  /v1/uploads:
    post:
      tags: [Uploads]
      summary: Create an upload (multipart session)
      operationId: createUpload
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GenericObject"
      responses:
        "200":
          description: Upload created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericObject"

  /v1/uploads/{upload_id}/parts:
    post:
      tags: [Uploads]
      summary: Upload a part
      operationId: uploadPart
      parameters:
        - in: path
          name: upload_id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: Part accepted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericObject"

  /v1/uploads/{upload_id}/complete:
    post:
      tags: [Uploads]
      summary: Complete the upload
      operationId: completeUpload
      parameters:
        - in: path
          name: upload_id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Upload completed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericObject"

  # === Images ===
  /v1/images/generations:
    post:
      tags: [Images]
      summary: Generate an image
      operationId: createImageGeneration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                model: { type: string }
                prompt: { type: string }
                size: { type: string }
              additionalProperties: true
      responses:
        "200":
          description: Image generation result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericObject"

  /v1/images/edits:
    post:
      tags: [Images]
      summary: Edit an image
      operationId: createImageEdit
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                mask:
                  type: string
                  format: binary
                prompt:
                  type: string
              additionalProperties: true
      responses:
        "200":
          description: Image edit result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericObject"

  /v1/images/variations:
    post:
      tags: [Images]
      summary: Create image variations
      operationId: createImageVariation
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                n:
                  type: integer
                size:
                  type: string
              additionalProperties: true
      responses:
        "200":
          description: Variation result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericObject"

  # === Audio ===
  /v1/audio/transcriptions:
    post:
      tags: [Audio]
      summary: Speech-to-text transcription
      operationId: createTranscription
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                model:
                  type: string
                language:
                  type: string
              additionalProperties: true
      responses:
        "200":
          description: Transcription
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericObject"

  /v1/audio/translations:
    post:
      tags: [Audio]
      summary: Speech-to-text translation
      operationId: createTranslation
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                model:
                  type: string
                target_language:
                  type: string
              additionalProperties: true
      responses:
        "200":
          description: Translation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericObject"

  /v1/audio/speech:
    post:
      tags: [Audio]
      summary: Text-to-speech
      operationId: createSpeech
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                model: { type: string }
                voice: { type: string }
                input: { type: string }
              additionalProperties: true
      responses:
        "200":
          description: Audio stream or JSON
          content:
            audio/mpeg:
              schema:
                type: string
                format: binary
            application/json:
              schema:
                $ref: "#/components/schemas/GenericObject"

  # === Vector Stores (assistants=v2 upstream) ===
  /v1/vector_stores:
    get:
      tags: [Vector Stores]
      summary: List vector stores
      operationId: listVectorStores
      responses:
        "200":
          description: Vector store list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericObject"
    post:
      tags: [Vector Stores]
      summary: Create vector store
      operationId: createVectorStore
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GenericObject"
      responses:
        "200":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericObject"

  /v1/vector_stores/{vector_store_id}:
    get:
      tags: [Vector Stores]
      summary: Retrieve vector store
      operationId: getVectorStore
      parameters:
        - in: path
          name: vector_store_id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Vector store object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericObject"
    delete:
      tags: [Vector Stores]
      summary: Delete vector store
      operationId: deleteVectorStore
      parameters:
        - in: path
          name: vector_store_id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericObject"

  /v1/vector_stores/{vector_store_id}/files:
    get:
      tags: [Vector Stores]
      summary: List files in a vector store
      operationId: listVectorStoreFiles
      parameters:
        - in: path
          name: vector_store_id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: File list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericObject"
    post:
      tags: [Vector Stores]
      summary: Add files to a vector store
      operationId: addVectorStoreFiles
      parameters:
        - in: path
          name: vector_store_id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GenericObject"
      responses:
        "200":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericObject"

  /v1/vector_stores/{vector_store_id}/files/{file_id}:
    delete:
      tags: [Vector Stores]
      summary: Remove a file from a vector store
      operationId: deleteVectorStoreFile
      parameters:
        - in: path
          name: vector_store_id
          required: true
          schema: { type: string }
        - in: path
          name: file_id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericObject"

components:
  schemas:
    GenericObject:
      type: object
      properties: {}
      additionalProperties: true
    Health:
      type: object
      required: [status]
      properties:
        status:
          type: string
    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            type: { type: string }
            message: { type: string }
            detail:
              $ref: "#/components/schemas/GenericObject"
          additionalProperties: true
      additionalProperties: false

security: []

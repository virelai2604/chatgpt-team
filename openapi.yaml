openapi: 3.1.0
info:
  title: ChatGPT Team Relay (BIFL Surface)
  version: "2025-10-23"
  description: >
    OpenAI-compatible relay exposing the unified /v1/responses interface plus Files/Uploads,
    Images, Audio, Vector Stores, and Models (list). Legacy/sunset and UI-native routes removed.
servers:
  - url: https://chatgpt-team-relay.onrender.com
tags:
  - name: Responses
  - name: Models
  - name: Files
  - name: Uploads
  - name: Images
  - name: Audio
  - name: Vector Stores

paths:
  # === RESPONSES (5) ===
  /v1/responses:
    post:
      tags: [Responses]
      operationId: createResponse
      summary: Create a model response (text/JSON; optional tools; optional streaming)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResponseRequest'
      responses:
        "200":
          description: Non-stream response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseObject'
        "202":
          description: Stream begun (SSE/NDJSON). Proxy streams directly.

  /v1/responses/{response_id}:
    get:
      tags: [Responses]
      operationId: getResponse
      summary: Get a response by id
      parameters:
        - name: response_id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Response object (or stream if requested upstream)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseObject'
    delete:
      tags: [Responses]
      operationId: deleteResponse
      summary: Delete a response by id
      parameters:
        - name: response_id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericObject'

  /v1/responses/{response_id}/cancel:
    post:
      tags: [Responses]
      operationId: cancelResponse
      summary: Cancel a background response
      parameters:
        - name: response_id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Cancelled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericObject'

  /v1/responses/{response_id}/input_items:
    get:
      tags: [Responses]
      operationId: listResponseInputItems
      summary: List input items associated with a response
      parameters:
        - name: response_id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Array of input items
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/GenericObject' }

  # === MODELS (1) ===
  /v1/models:
    get:
      tags: [Models]
      operationId: listModels
      summary: List available models
      responses:
        "200":
          description: Model list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelList'

  # === FILES (5) ===
  /v1/files:
    get:
      tags: [Files]
      operationId: listFiles
      summary: List files
      responses:
        "200":
          description: Files
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileList'
    post:
      tags: [Files]
      operationId: createFile
      summary: Upload a file (single-part)
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                purpose:
                  type: string
              required: [file, purpose]
      responses:
        "200":
          description: File created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileObject'

  /v1/files/{file_id}:
    get:
      tags: [Files]
      operationId: getFile
      summary: Retrieve file metadata
      parameters:
        - name: file_id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: File object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileObject'
    delete:
      tags: [Files]
      operationId: deleteFile
      summary: Delete a file
      parameters:
        - name: file_id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericObject'

  /v1/files/{file_id}/content:
    get:
      tags: [Files]
      operationId: getFileContent
      summary: Download file content
      parameters:
        - name: file_id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Raw file bytes
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary

  # === UPLOADS (3) ===
  /v1/uploads:
    post:
      tags: [Uploads]
      operationId: createUpload
      summary: Create a multipart upload session
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filename: { type: string }
                purpose: { type: string }
                mime_type: { type: string }
              required: [filename, purpose]
      responses:
        "200":
          description: Upload created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadObject'

  /v1/uploads/{upload_id}/parts:
    post:
      tags: [Uploads]
      operationId: uploadPart
      summary: Upload a part
      parameters:
        - name: upload_id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: Part accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadPartObject'

  /v1/uploads/{upload_id}/complete:
    post:
      tags: [Uploads]
      operationId: completeUpload
      summary: Complete the upload
      parameters:
        - name: upload_id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadCompleteRequest'
      responses:
        "200":
          description: Upload completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileObject'

  # === IMAGES (3) ===
  /v1/images/generations:
    post:
      tags: [Images]
      operationId: createImage
      summary: Generate an image
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageGenerationRequest'
      responses:
        "200":
          description: Image generation result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageResult'

  /v1/images/edits:
    post:
      tags: [Images]
      operationId: editImage
      summary: Edit an image
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ImageEditRequest'
      responses:
        "200":
          description: Image edit result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageResult'

  /v1/images/variations:
    post:
      tags: [Images]
      operationId: createImageVariation
      summary: Create image variations
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ImageVariationRequest'
      responses:
        "200":
          description: Variation result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageResult'

  # === AUDIO (3) ===
  /v1/audio/transcriptions:
    post:
      tags: [Audio]
      operationId: createTranscription
      summary: Speech-to-text transcription
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AudioTranscriptionRequest'
      responses:
        "200":
          description: Transcription
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericObject'

  /v1/audio/translations:
    post:
      tags: [Audio]
      operationId: createTranslation
      summary: Speech-to-text translation
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AudioTranslationRequest'
      responses:
        "200":
          description: Translation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericObject'

  /v1/audio/speech:
    post:
      tags: [Audio]
      operationId: createSpeech
      summary: Text-to-speech
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AudioSpeechRequest'
      responses:
        "200":
          description: Audio stream or JSON
          content:
            audio/mpeg:
              schema:
                type: string
                format: binary
            application/json:
              schema:
                $ref: '#/components/schemas/GenericObject'

  # === VECTOR STORES (10) ===
  /v1/vector_stores:
    get:
      tags: [Vector Stores]
      operationId: listVectorStores
      summary: List vector stores
      responses:
        "200":
          description: Vector store list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreList'
    post:
      tags: [Vector Stores]
      operationId: createVectorStore
      summary: Create vector store
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              additionalProperties: true
      responses:
        "200":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStore'

  /v1/vector_stores/{vector_store_id}:
    get:
      tags: [Vector Stores]
      operationId: getVectorStore
      summary: Retrieve vector store
      parameters:
        - name: vector_store_id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Vector store object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStore'
    delete:
      tags: [Vector Stores]
      operationId: deleteVectorStore
      summary: Delete vector store
      parameters:
        - name: vector_store_id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericObject'

  /v1/vector_stores/{vector_store_id}/files:
    get:
      tags: [Vector Stores]
      operationId: listVectorStoreFiles
      summary: List files in a vector store
      parameters:
        - name: vector_store_id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: File list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreFileList'
    post:
      tags: [Vector Stores]
      operationId: addVectorStoreFiles
      summary: Add files to a vector store
      parameters:
        - name: vector_store_id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              additionalProperties: true
      responses:
        "200":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericObject'

  /v1/vector_stores/{vector_store_id}/files/{file_id}:
    delete:
      tags: [Vector Stores]
      operationId: deleteVectorStoreFile
      summary: Remove a file from a vector store
      parameters:
        - name: vector_store_id
          in: path
          required: true
          schema: { type: string }
        - name: file_id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericObject'

  /v1/vector_stores/{vector_store_id}/file_batches:
    post:
      tags: [Vector Stores]
      operationId: createVectorStoreFileBatch
      summary: Create a file batch
      parameters:
        - name: vector_store_id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VectorStoreFileBatchCreateRequest'
      responses:
        "200":
          description: Batch created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreFileBatch'

  /v1/vector_stores/{vector_store_id}/file_batches/{batch_id}:
    get:
      tags: [Vector Stores]
      operationId: getVectorStoreFileBatch
      summary: Get a file batch
      parameters:
        - name: vector_store_id
          in: path
          required: true
          schema: { type: string }
        - name: batch_id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Batch detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreFileBatch'

  /v1/vector_stores/{vector_store_id}/file_batches/{batch_id}/files/{file_id}:
    delete:
      tags: [Vector Stores]
      operationId: deleteVectorStoreBatchFile
      summary: Remove a file from a batch
      parameters:
        - name: vector_store_id
          in: path
          required: true
          schema: { type: string }
        - name: batch_id
          in: path
          required: true
          schema: { type: string }
        - name: file_id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericObject'

components:
  schemas:
    # Generic helpers
    GenericObject:
      type: object
      description: Arbitrary JSON object
      properties: {}
      additionalProperties: true

    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            type: { type: string }
            message: { type: string }
            detail: { $ref: '#/components/schemas/GenericObject' }
          required: [type, message]

    # Responses API
    TextConfig:
      type: object
      properties:
        format: { type: string, description: "e.g., 'text', 'json_object' (Structured Outputs)" }
        verbosity: { type: string }
      additionalProperties: true

    FunctionTool:
      type: object
      required: [type, function]
      properties:
        type:
          type: string
          enum: [function]
        function:
          type: object
          required: [name]
          properties:
            name: { type: string }
            description: { type: string }
            parameters:
              type: object
              description: "JSON Schema for args"
              properties: {}
              additionalProperties: true

    BuiltInTool:
      type: object
      required: [type]
      properties:
        type:
          type: string
          enum: [code_interpreter, file_search, web_search, image_generation, retrieval, browser]
        config:
          $ref: '#/components/schemas/GenericObject'

    Tool:
      description: "Function tool or built-in tool"
      oneOf:
        - $ref: '#/components/schemas/FunctionTool'
        - $ref: '#/components/schemas/BuiltInTool'

    ResponseRequest:
      type: object
      required: [model]
      properties:
        model: { type: string, example: "gpt-4.1" }
        input:
          oneOf:
            - { type: string }
            - { type: array, items: { $ref: '#/components/schemas/GenericObject' } }
        instructions: { type: string }
        tools:
          type: array
          items: { $ref: '#/components/schemas/Tool' }
        tool_choice:
          oneOf:
            - { type: string }
            - { $ref: '#/components/schemas/GenericObject' }
        text: { $ref: '#/components/schemas/TextConfig' }
        temperature: { type: number, default: 1 }
        top_p: { type: number, default: 1 }
        top_logprobs: { type: integer, default: 0 }
        truncation:
          type: string
          enum: [auto, disabled]
          default: disabled
        stream: { type: boolean, default: false }
        stream_options: { $ref: '#/components/schemas/GenericObject' }
        include:
          type: array
          items: { type: string }
        previous_response_id: { type: string }
        conversation:
          oneOf:
            - { type: string }
            - { $ref: '#/components/schemas/GenericObject' }
        parallel_tool_calls: { type: boolean, default: true }
        max_output_tokens: { type: integer }
        max_tool_calls: { type: integer }
        reasoning: { $ref: '#/components/schemas/GenericObject' }
        safety_identifier: { type: string }
        service_tier:
          type: string
          enum: [auto, default, flex, priority]
          default: auto
        store: { type: boolean, default: true }
        prompt_cache_key: { type: string }
        metadata: { $ref: '#/components/schemas/GenericObject' }

    ResponseMessage:
      type: object
      properties:
        id: { type: string }
        type: { type: string, example: "message" }
        role: { type: string, example: "assistant" }
        status: { type: string }
        content:
          type: array
          items: { $ref: '#/components/schemas/GenericObject' }

    ResponseObject:
      type: object
      properties:
        id: { type: string }
        object: { type: string, example: "response" }
        created_at: { type: integer }
        status: { type: string }
        model: { type: string }
        output:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/ResponseMessage'
              - { $ref: '#/components/schemas/GenericObject' }
        usage: { $ref: '#/components/schemas/GenericObject' }
        error: { $ref: '#/components/schemas/GenericObject' }
      additionalProperties: true

    # Models
    Model:
      type: object
      properties:
        id: { type: string }
        object: { type: string, example: "model" }
        created: { type: integer }
        owned_by: { type: string }
      additionalProperties: true

    ModelList:
      type: object
      properties:
        object: { type: string, example: "list" }
        data:
          type: array
          items: { $ref: '#/components/schemas/Model' }

    # Files / Uploads
    FileObject:
      type: object
      properties:
        id: { type: string }
        object: { type: string, example: "file" }
        filename: { type: string }
        bytes: { type: integer }
        created_at: { type: integer }
        purpose: { type: string }
        status: { type: string }
      additionalProperties: true

    FileList:
      type: object
      properties:
        object: { type: string, example: "list" }
        data:
          type: array
          items: { $ref: '#/components/schemas/FileObject' }

    UploadObject:
      type: object
      properties:
        id: { type: string }
        object: { type: string, example: "upload" }
        status: { type: string }
      additionalProperties: true

    UploadPartObject:
      type: object
      properties:
        id: { type: string }
        etag: { type: string }
      additionalProperties: true

    UploadCompleteRequest:
      type: object
      properties:
        part_ids:
          type: array
          items: { type: string }
      additionalProperties: true

    # Images
    ImageGenerationRequest:
      type: object
      required: [model, prompt]
      properties:
        model: { type: string }
        prompt: { type: string }
        size: { type: string, example: "1024x1024" }
      additionalProperties: true

    ImageEditRequest:
      type: object
      properties:
        image: { type: string, format: binary }
        mask: { type: string, format: binary }
        prompt: { type: string }
      required: [image, prompt]
      additionalProperties: true

    ImageVariationRequest:
      type: object
      properties:
        image: { type: string, format: binary }
        n: { type: integer, minimum: 1, default: 1 }
        size: { type: string }
      required: [image]
      additionalProperties: true

    ImageResult:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              url: { type: string }
              b64_json: { type: string }
            additionalProperties: true
      additionalProperties: true

    # Audio
    AudioTranscriptionRequest:
      type: object
      properties:
        file: { type: string, format: binary }
        model: { type: string }
        prompt: { type: string }
        temperature: { type: number }
      required: [file, model]
      additionalProperties: true

    AudioTranslationRequest:
      type: object
      properties:
        file: { type: string, format: binary }
        model: { type: string }
      required: [file, model]
      additionalProperties: true

    AudioSpeechRequest:
      type: object
      properties:
        model: { type: string }
        input: { type: string }
        voice: { type: string }
        format: { type: string }
      required: [model, input]
      additionalProperties: true

    # Vector Stores
    VectorStore:
      type: object
      properties:
        id: { type: string }
        object: { type: string, example: "vector_store" }
        name: { type: string }
        status: { type: string }
      additionalProperties: true

    VectorStoreList:
      type: object
      properties:
        object: { type: string, example: "list" }
        data:
          type: array
          items: { $ref: '#/components/schemas/VectorStore' }

    VectorStoreFile:
      type: object
      properties:
        id: { type: string }
        object: { type: string, example: "vector_store.file" }
        file_id: { type: string }
        status: { type: string }
      additionalProperties: true

    VectorStoreFileList:
      type: object
      properties:
        object: { type: string, example: "list" }
        data:
          type: array
          items: { $ref: '#/components/schemas/VectorStoreFile' }

    VectorStoreFileBatch:
      type: object
      properties:
        id: { type: string }
        object: { type: string, example: "vector_store.file_batch" }
        status: { type: string }
      additionalProperties: true

    VectorStoreFileBatchCreateRequest:
      type: object
      properties:
        file_ids:
          type: array
          items: { type: string }
      required: [file_ids]
      additionalProperties: true

security: []

openapi: 3.1.0
info:
  title: ChatGPT Team Relay (BIFL Surface)
  version: '2025-10-24'
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  description: |
    OpenAI-compatible relay exposing unified /v1/responses plus non-UI-native surfaces:
    Files/Uploads, Images, Audio, Vector Stores, Videos (Sora 2 Pro), Realtime, Embeddings, and Jobs.
    Legacy/sunset routes excluded. Exactly 28 operations.
servers:
  - url: https://chatgpt-team-relay.onrender.com
security:
  - BearerAuth: []
tags:
  - name: Responses
    description: Unified response creation and control
  - name: Models
    description: Retrieve available models
  - name: Files
    description: File upload, retrieval, and content streaming
  - name: Uploads
    description: Multipart upload management
  - name: Images
    description: Image generation
  - name: Audio
    description: Audio transcription and speech
  - name: Vector Stores
    description: Vector store creation, querying, and batch operations
  - name: Videos
    description: Video generation and remixing using Sora 2 Pro
  - name: Realtime
    description: Realtime GPT-5/4o session initialization
  - name: Jobs
    description: Unified background job operations
paths:
  /v1/responses:
    post:
      tags:
        - Responses
      summary: Create a model response
      operationId: createResponse
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResponseCreate'
      responses:
        '200':
          description: Model response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseObject'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
  /v1/responses/{response_id}:
    get:
      tags:
        - Responses
      summary: Retrieve a response
      operationId: getResponse
      parameters:
        - name: response_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Response object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseObject'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
  /v1/responses/{response_id}/cancel:
    post:
      tags:
        - Responses
      summary: Cancel a running response
      operationId: cancelResponse
      parameters:
        - name: response_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Cancelled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AckObject'
        '400':
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
  /v1/models:
    get:
      tags:
        - Models
      summary: List models
      operationId: listModels
      responses:
        '200':
          description: Model list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericObject'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
  /v1/files:
    get:
      tags:
        - Files
      summary: List files
      operationId: listFiles
      responses:
        '200':
          description: Files
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileObject'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
    post:
      tags:
        - Files
      summary: Upload file
      operationId: createFile
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileObject'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
  /v1/files/{file_id}:
    get:
      tags:
        - Files
      summary: Get file metadata
      operationId: getFile
      parameters:
        - name: file_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: File object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileObject'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
  /v1/files/{file_id}/content:
    get:
      tags:
        - Files
      summary: Download raw file content
      operationId: getFileContent
      parameters:
        - name: file_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: File binary content
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
  /v1/uploads:
    post:
      tags:
        - Uploads
      summary: Create upload session
      operationId: createUpload
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadObject'
      responses:
        '200':
          description: Upload created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadObject'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
  /v1/images/generations:
    post:
      tags:
        - Images
      summary: Generate or edit image
      operationId: createImageGeneration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenericObject'
      responses:
        '200':
          description: Image result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericObject'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
  /v1/audio/transcriptions:
    post:
      tags:
        - Audio
      summary: Transcribe audio to text
      operationId: createTranscription
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Transcription
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericObject'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
  /v1/audio/speech:
    post:
      tags:
        - Audio
      summary: Text to speech
      operationId: createSpeech
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenericObject'
      responses:
        '200':
          description: Audio stream
          content:
            audio/mpeg:
              schema:
                type: string
                format: binary
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
  /v1/vector_stores:
    get:
      tags:
        - Vector Stores
      summary: List vector stores
      operationId: listVectorStores
      responses:
        '200':
          description: Vector store list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreObject'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
    post:
      tags:
        - Vector Stores
      summary: Create vector store
      operationId: createVectorStore
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VectorStoreObject'
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreObject'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
  /v1/vector_stores/{vector_store_id}/batches:
    get:
      tags:
        - Vector Stores
      summary: List all batches for a vector store
      operationId: listVectorStoreBatches
      parameters:
        - name: vector_store_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of batches
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericObject'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
    post:
      tags:
        - Vector Stores
      summary: Create a batch import for embeddings or files
      operationId: createVectorStoreBatch
      parameters:
        - name: vector_store_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                file_ids:
                  type: array
                  items:
                    type: string
              required:
                - file_ids
      responses:
        '200':
          description: Batch import started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericObject'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
  /v1/videos:
    post:
      tags:
        - Videos
      summary: Create a video generation job (Sora 2 Pro)
      operationId: createVideo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VideoCreate'
      responses:
        '200':
          description: Video job created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoObject'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
  /v1/videos/{video_id}:
    get:
      tags:
        - Videos
      summary: Retrieve a video job
      operationId: getVideo
      parameters:
        - name: video_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Video metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoObject'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
  /v1/videos/{video_id}/content:
    get:
      tags:
        - Videos
      summary: Download or stream generated video
      operationId: getVideoContent
      parameters:
        - name: video_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Video stream
          content:
            video/mp4:
              schema:
                type: string
                format: binary
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
  /v1/videos/{video_id}/remix:
    post:
      tags:
        - Videos
      summary: Remix an existing video using Sora 2 Pro
      operationId: remixVideo
      parameters:
        - name: video_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VideoRemix'
      responses:
        '200':
          description: Remix job created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoObject'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
  /v1/realtime/sessions:
    post:
      tags:
        - Realtime
      summary: Initialize realtime chat/audio/video session
      operationId: createRealtimeSession
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                model:
                  type: string
                  default: gpt-5-pro-realtime
                voice:
                  type: string
                mode:
                  type: string
                  enum:
                    - text
                    - audio
                    - video
                  default: text
              required:
                - model
      responses:
        '200':
          description: Session initialized
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_id:
                    type: string
                  url:
                    type: string
                  expires_in:
                    type: integer
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
  /v1/embeddings:
    post:
      tags:
        - Vector Stores
      summary: Create text or multimodal embeddings
      operationId: createEmbedding
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                model:
                  type: string
                  default: text-embedding-3-large
                input:
                  oneOf:
                    - type: string
                    - type: array
                      items:
                        type: string
              required:
                - model
                - input
      responses:
        '200':
          description: Embedding vector
          content:
            application/json:
              schema:
                type: object
                properties:
                  object:
                    type: string
                    default: embedding
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        embedding:
                          type: array
                          items:
                            type: number
                        index:
                          type: integer
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
  /v1/jobs:
    get:
      tags:
        - Jobs
      summary: List all asynchronous jobs
      operationId: listJobs
      responses:
        '200':
          description: Job list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericObject'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
    post:
      tags:
        - Jobs
      summary: Create unified asynchronous job
      operationId: createJob
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobObject'
      responses:
        '200':
          description: Job created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobObject'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
  /v1/jobs/{job_id}:
    get:
      tags:
        - Jobs
      summary: Retrieve a job’s current status
      operationId: getJob
      parameters:
        - name: job_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Job status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobObject'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
  /v1/jobs/{job_id}/cancel:
    post:
      tags:
        - Jobs
      summary: Cancel a running asynchronous job
      operationId: cancelJob
      parameters:
        - name: job_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Job cancelled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AckObject'
        '404':
          description: Job not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    ErrorObject:
      type: object
      properties:
        error:
          type: object
          properties:
            type:
              type: string
            message:
              type: string
          required:
            - type
            - message
      required:
        - error
    AckObject:
      type: object
      properties:
        ok:
          type: boolean
          default: true
      required:
        - ok
    GenericObject:
      type: object
      properties:
        id:
          type: string
        object:
          type: string
        note:
          type: string
      additionalProperties: true
    ResponseCreate:
      type: object
      properties:
        model:
          type: string
        input:
          type: string
      additionalProperties: true
    ResponseObject:
      type: object
      properties:
        id:
          type: string
        status:
          type: string
        output:
          type: string
      additionalProperties: true
    FileObject:
      type: object
      properties:
        id:
          type: string
        filename:
          type: string
        bytes:
          type: integer
      additionalProperties: true
    UploadObject:
      type: object
      properties:
        id:
          type: string
        status:
          type: string
      additionalProperties: true
    VectorStoreObject:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        created_at:
          type: integer
      additionalProperties: true
    VideoCreate:
      type: object
      properties:
        model:
          type: string
          default: sora-2-pro
        prompt:
          type: string
        seconds:
          type: integer
          default: 10
      required:
        - model
        - prompt
    VideoRemix:
      type: object
      properties:
        prompt:
          type: string
        parameters:
          type: object
          additionalProperties: true
      required:
        - prompt
    VideoObject:
      type: object
      properties:
        id:
          type: string
        model:
          type: string
        status:
          type: string
          enum:
            - queued
            - processing
            - completed
            - failed
        progress:
          type: number
        created_at:
          type: integer
      required:
        - id
        - model
        - status
    JobObject:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum:
            - fine_tuning
            - batch
            - video
            - custom
        status:
          type: string
          enum:
            - queued
            - running
            - completed
            - failed
        created_at:
          type: integer
      required:
        - id
        - type
        - status

openapi: 3.1.0
info:
  title: OpenAI Relay API
  version: "1.0.0"
  description: BIFL-grade OpenAI relay with essential endpoints and multi-format video/image streaming.
servers:
  - url: https://chatgpt-team-relay.onrender.com

paths:
  /v1/chat/completions:
    post:
      operationId: chatCompletions_create
      summary: Create chat completion
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [model, messages]
              properties:
                model: { type: string }
                messages:
                  type: array
                  items:
                    type: object
                    required: [role, content]
                    properties:
                      role: { type: string, enum: [user, assistant, system, tool] }
                      content: { type: string }
                stream: { type: boolean, default: false }
      responses:
        '200': { description: Chat completion created }

  /v1/embeddings:
    post:
      operationId: embeddings_create
      summary: Create embedding
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [model, input]
              properties:
                model: { type: string }
                input: { type: string }
      responses:
        '200': { description: Embedding created }

  /v1/files:
    post:
      operationId: files_upload
      summary: Upload file
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200': { description: File uploaded }
    get:
      operationId: files_list
      summary: List files
      responses:
        '200': { description: File list }

  /v1/files/{file_id}:
    get:
      operationId: files_retrieve
      summary: Get file
      parameters:
        - name: file_id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: File details }
    delete:
      operationId: files_delete
      summary: Delete file
      parameters:
        - name: file_id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: File deleted }

  /v1/images/generations:
    post:
      operationId: images_generate
      summary: Generate image (DALLÂ·E)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [model, prompt]
              properties:
                model: { type: string }
                prompt: { type: string }
                n: { type: integer }
      responses:
        '200': { description: Image created }

  /v1/images/{image_id}/content:
    get:
      operationId: images_stream_content
      summary: Stream image file content (relay extension)
      parameters:
        - name: image_id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Image file stream
          content:
            image/png:
              schema:
                type: string
                format: binary
            image/jpeg:
              schema:
                type: string
                format: binary

  /v1/audio/speech:
    post:
      operationId: audio_tts
      summary: Text to speech
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [model, input]
              properties:
                model: { type: string }
                input: { type: string }
      responses:
        '200': { description: Audio created }

  /v1/audio/transcriptions:
    post:
      operationId: audio_transcribe
      summary: Audio transcription (Whisper)
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file: { type: string, format: binary }
                model: { type: string }
      responses:
        '200': { description: Transcription created }

  /v1/audio/translation:
    post:
      operationId: audio_translate
      summary: Translate audio to English
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file: { type: string, format: binary }
                model: { type: string }
      responses:
        '200': { description: Audio translated }

  /v1/models:
    get:
      operationId: models_list
      summary: List available models
      responses:
        '200': { description: Model list }

  /v1/assistants:
    post:
      operationId: assistants_create
      summary: Create assistant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [model, instructions]
              properties:
                model: { type: string }
                instructions: { type: string }
      responses:
        '200': { description: Assistant created }

  /v1/assistants/{assistant_id}/files:
    get:
      operationId: assistants_list_files
      summary: List files for assistant
      parameters:
        - name: assistant_id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Files for assistant }
    post:
      operationId: assistants_attach_file
      summary: Attach file to assistant
      parameters:
        - name: assistant_id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [file_id]
              properties:
                file_id: { type: string }
      responses:
        '200': { description: File attached }

  /v1/threads:
    post:
      operationId: threads_create
      summary: Create thread
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                messages:
                  type: array
                  items:
                    type: object
                    required: [role, content]
                    properties:
                      role:
                        type: string
                        enum: [user, assistant]
                      content: { type: string }
                      metadata:
                        type: object
                        additionalProperties: true
                        properties: {}
      responses:
        '200': { description: Thread created }

  /v1/threads/{thread_id}/messages:
    post:
      operationId: threads_add_message
      summary: Add message to thread
      parameters:
        - name: thread_id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [role, content]
              properties:
                role:
                  type: string
                  enum: [user, assistant]
                content: { type: string }
      responses:
        '200': { description: Message added }

  /v1/threads/{thread_id}/messages/{message_id}:
    get:
      operationId: threads_get_message
      summary: Get message by ID
      parameters:
        - name: thread_id
          in: path
          required: true
          schema: { type: string }
        - name: message_id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Message retrieved }

  /v1/threads/{thread_id}/runs:
    post:
      operationId: threads_create_run
      summary: Create run for thread
      parameters:
        - name: thread_id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                assistant_id: { type: string }
      responses:
        '200': { description: Run created }

  /v1/threads/{thread_id}/runs/{run_id}:
    get:
      operationId: threads_get_run
      summary: Get run by ID
      parameters:
        - name: thread_id
          in: path
          required: true
          schema: { type: string }
        - name: run_id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Run retrieved }

  /v1/threads/{thread_id}/runs/{run_id}/steps:
    get:
      operationId: threads_list_run_steps
      summary: List steps for run
      parameters:
        - name: thread_id
          in: path
          required: true
          schema: { type: string }
        - name: run_id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Run steps listed }

  /v1/vector_stores:
    get:
      operationId: vectorStores_list
      summary: List vector stores
      responses:
        '200': { description: Vector store list }
    post:
      operationId: vectorStores_create
      summary: Create vector store
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
      responses:
        '200': { description: Vector store created }

  /v1/vector_stores/{vector_store_id}/queries:
    post:
      operationId: vectorStores_query
      summary: Query vector store
      parameters:
        - name: vector_store_id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query: { type: string }
      responses:
        '200': { description: Vector store queried }

  /v1/videos:
    post:
      operationId: videos_create
      summary: Create video (Sora)
      description: Start a new video render job from a prompt, with optional reference images or a remix ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [prompt]
              properties:
                prompt:
                  type: string
                  description: The text prompt for video generation.
                model:
                  type: string
                  description: Model to use (e.g. 'sora-1', 'sora-2-pro').
                reference_images:
                  type: array
                  items:
                    type: string
                    format: uri
                  description: URLs for reference images.
                reference_video:
                  type: string
                  format: uri
                  description: URL for a reference video.
                remix_id:
                  type: string
                  description: Existing video ID to remix.
      responses:
        '200':
          description: Video render job started

    get:
      operationId: videos_list
      summary: List videos
      description: Enumerate your videos with pagination for history, dashboards, or housekeeping.
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 20
          description: Number of results to return.
        - name: after
          in: query
          required: false
          schema:
            type: string
          description: Cursor for pagination.
      responses:
        '200':
          description: List of videos

  /v1/videos/{video_id}:
    get:
      operationId: videos_get_status
      summary: Get video status
      description: Retrieve the current state of a video render job and monitor its progress.
      parameters:
        - name: video_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Video status/details

    delete:
      operationId: videos_delete
      summary: Delete video
      description: Remove an individual video ID from OpenAIâs storage.
      parameters:
        - name: video_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Video deleted

  /v1/videos/{video_id}/content:
    get:
      operationId: videos_download
      summary: Download video (MP4, GIF, MOV)
      description: Fetch the finished MP4, GIF, or MOV video once the job is completed.
      parameters:
        - name: video_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Video file stream
          content:
            video/mp4:
              schema:
                type: string
                format: binary
            video/quicktime:
              schema:
                type: string
                format: binary
            image/gif:
              schema:
                type: string
                format: binary

  /v1/videos/{video_id}/remix:
    post:
      operationId: videos_remix
      summary: Remix video
      description: Start a remix job using an existing video ID.
      parameters:
        - name: video_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [prompt]
              properties:
                prompt:
                  type: string
                  description: Remix prompt.
                reference_images:
                  type: array
                  items:
                    type: string
                    format: uri
                  description: URLs for reference images.
                reference_video:
                  type: string
                  format: uri
                  description: Reference video URL.
      responses:
        '200':
          description: Remix job started

/v1/attachments/upload:
  post:
    operationId: attachments_upload
    summary: Upload an attachment
    requestBody:
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              file:
                type: string
                format: binary
    responses:
      '200':
        description: Attachment uploaded
        content:
          application/json:
            schema:
              type: object
              properties:
                status: { type: string }
                sha256: { type: string }
                chat_id: { type: string }

/v1/attachments/{chat_id}/download:
  get:
    operationId: attachments_download
    summary: Download an attachment by chat_id
    parameters:
      - name: chat_id
        in: path
        required: true
        schema: { type: string }
    responses:
      '200':
        description: Attachment binary download
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary

/v1/attachments/list:
  get:
    operationId: attachments_list
    summary: List recent attachments
    parameters:
      - in: query
        name: limit
        schema: { type: integer, default: 25, minimum: 1, maximum: 100 }
        description: Maximum number of attachments to return.
    responses:
      '200':
        description: List of attachments
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  chat_id: { type: string }
                  filename: { type: string }
                  mimetype: { type: string }
                  size: { type: integer }
                  imported_at: { type: string }
                  version: { type: integer }

/v1/attachments/{chat_id}:
  delete:
    operationId: attachments_delete
    summary: Delete attachment by chat_id
    parameters:
      - name: chat_id
        in: path
        required: true
        schema: { type: string }
    responses:
      '200':
        description: Attachment deleted
        content:
          application/json:
            schema:
              type: object
              properties:
                status: { type: string }
                chat_id: { type: string }


components:
  schemas: {}

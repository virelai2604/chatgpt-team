openapi: 3.1.0
info:
  title: ChatGPT Team Relay (BIFL Surface)
  version: "2025-10-25"
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  description: |
    OpenAI-compatible relay exposing unified /v1/responses plus non-UI-native surfaces:
    Files/Uploads, Images, Audio, Vector Stores, Realtime, Embeddings, and Jobs.
    Legacy /v1/videos routes replaced by /v1/responses with tools[].
servers:
  - url: https://chatgpt-team-relay.onrender.com
security:
  - BearerAuth: []

tags:
  - name: Responses
    description: Unified response creation and control (text, image, audio, video)
  - name: Models
    description: Retrieve available models
  - name: Files
    description: File upload, retrieval, and content streaming
  - name: Uploads
    description: Multipart upload management
  - name: Images
    description: Image generation
  - name: Audio
    description: Audio transcription and speech
  - name: Vector Stores
    description: Vector store creation, querying, and batch operations
  - name: Realtime
    description: Realtime GPT-5/4o session initialization
  - name: Jobs
    description: Unified background job operations

paths:
  /v1/responses:
    post:
      tags: [Responses]
      summary: Create a model response (text, image, audio, or video)
      description: |
        Unified endpoint for multimodal generation.
        Supports text, image, audio, and video via tools[].
        Replaces legacy /v1/videos routes.
      operationId: createResponse
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResponseCreate"
      responses:
        "200":
          description: Model response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseObject"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorObject"

  /v1/responses/{response_id}:
    get:
      tags: [Responses]
      summary: Retrieve a response
      operationId: getResponse
      parameters:
        - name: response_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Response object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseObject"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorObject"

  /v1/responses/{response_id}/cancel:
    post:
      tags: [Responses]
      summary: Cancel a running response
      operationId: cancelResponse
      parameters:
        - name: response_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Cancelled
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AckObject"
        "400":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorObject"

  /v1/models:
    get:
      tags: [Models]
      summary: List models
      operationId: listModels
      responses:
        "200":
          description: Model list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericObject"

  /v1/files:
    get:
      tags: [Files]
      summary: List files
      operationId: listFiles
      responses:
        "200":
          description: Files
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileObject"
    post:
      tags: [Files]
      summary: Upload file
      operationId: createFile
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileObject"

  /v1/files/{file_id}:
    get:
      tags: [Files]
      summary: Get file metadata
      operationId: getFile
      parameters:
        - name: file_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: File object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileObject"

  /v1/files/{file_id}/content:
    get:
      tags: [Files]
      summary: Download raw file content
      operationId: getFileContent
      parameters:
        - name: file_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: File binary content
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary

  /v1/uploads:
    post:
      tags: [Uploads]
      summary: Create upload session
      operationId: createUpload
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UploadObject"
      responses:
        "200":
          description: Upload created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadObject"

  /v1/images/generations:
    post:
      tags: [Images]
      summary: Generate or edit image
      operationId: createImageGeneration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GenericObject"
      responses:
        "200":
          description: Image result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericObject"

  /v1/audio/transcriptions:
    post:
      tags: [Audio]
      summary: Transcribe audio to text
      operationId: createTranscription
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: Transcription
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericObject"

  /v1/audio/speech:
    post:
      tags: [Audio]
      summary: Text to speech
      operationId: createSpeech
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GenericObject"
      responses:
        "200":
          description: Audio stream
          content:
            audio/mpeg:
              schema:
                type: string
                format: binary

  /v1/vector_stores:
    get:
      tags: [Vector Stores]
      summary: List vector stores
      operationId: listVectorStores
      responses:
        "200":
          description: Vector store list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VectorStoreObject"
    post:
      tags: [Vector Stores]
      summary: Create vector store
      operationId: createVectorStore
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VectorStoreObject"
      responses:
        "200":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VectorStoreObject"

  /v1/realtime/sessions:
    post:
      tags: [Realtime]
      summary: Initialize realtime chat/audio/video session
      operationId: createRealtimeSession
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                model:
                  type: string
                  default: gpt-5-pro-realtime
                voice:
                  type: string
                mode:
                  type: string
                  enum: [text, audio, video]
                  default: text
      responses:
        "200":
          description: Session initialized
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_id: { type: string }
                  url: { type: string }
                  expires_in: { type: integer }

  /v1/embeddings:
    post:
      tags: [Vector Stores]
      summary: Create text or multimodal embeddings
      operationId: createEmbedding
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                model:
                  type: string
                  default: text-embedding-3-large
                input:
                  oneOf:
                    - type: string
                    - type: array
                      items: { type: string }
      responses:
        "200":
          description: Embedding vector
          content:
            application/json:
              schema:
                type: object
                properties:
                  object: { type: string, default: embedding }
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        embedding:
                          type: array
                          items: { type: number }
                        index: { type: integer }

  /v1/jobs:
    get:
      tags: [Jobs]
      summary: List all asynchronous jobs
      operationId: listJobs
      responses:
        "200":
          description: Job list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericObject"
    post:
      tags: [Jobs]
      summary: Create unified asynchronous job
      operationId: createJob
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JobObject"
      responses:
        "200":
          description: Job created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobObject"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

  schemas:
    ErrorObject:
      type: object
      properties:
        error:
          type: object
          properties:
            type: { type: string }
            message: { type: string }
      required: [error]

    AckObject:
      type: object
      properties:
        ok: { type: boolean, default: true }
      required: [ok]

    GenericObject:
      type: object
      properties:
        id: { type: string }
        object: { type: string }
        note: { type: string }
      additionalProperties: true

    ResponseCreate:
      type: object
      properties:
        model: { type: string, description: Model name to use }
        input:
          oneOf:
            - type: string
            - type: array
              items: { type: string }
        stream: { type: boolean, default: false }
        temperature: { type: number, default: 0.7 }
        tools:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/ToolVideoGeneration"
              - $ref: "#/components/schemas/ToolVideoRemix"
              - $ref: "#/components/schemas/ToolImageGeneration"
              - $ref: "#/components/schemas/ToolAudioTranscription"
      required: [model, input]

    ResponseObject:
      type: object
      properties:
        id: { type: string }
        object: { type: string, default: response }
        status: { type: string }
        output:
          oneOf:
            - type: string
            - type: array
              items: { type: object }
        usage:
          type: object
          properties:
            input_tokens: { type: integer }
            output_tokens: { type: integer }
            total_tokens: { type: integer }

    FileObject:
      type: object
      properties:
        id: { type: string }
        object: { type: string, default: file }
        filename: { type: string }
        bytes: { type: integer }
        created_at: { type: integer }
        purpose: { type: string }
        status: { type: string }
      required: [id, filename]

    UploadObject:
      type: object
      properties:
        id: { type: string }
        object: { type: string, default: upload }
        status: { type: string }
        created_at: { type: integer }
      required: [id]

    VectorStoreObject:
      type: object
      properties:
        id: { type: string }
        object: { type: string, default: vector_store }
        name: { type: string }
        created_at: { type: integer }
        status: { type: string }

    JobObject:
      type: object
      properties:
        id: { type: string }
        type: { type: string, enum: [fine_tuning, batch, video, custom] }
        status: { type: string, enum: [queued, running, completed, failed] }
        created_at: { type: integer }

    ToolVideoGeneration:
      type: object
      properties:
        type: { type: string, enum: [video_generation] }
        model: { type: string, default: sora-2-pro }
        parameters:
          type: object
          properties:
            seconds: { type: integer, default: 10 }
            size: { type: string, example: "1920x1080" }
      required: [type, model]

    ToolVideoRemix:
      type: object
      properties:
        type: { type: string, enum: [video_remix] }
        model: { type: string, default: sora-2-pro }
        parameters:
          type: object
          properties:
            source_video_id: { type: string }
            prompt: { type: string }
            strength: { type: number, default: 0.6 }
      required: [type, parameters]

    ToolImageGeneration:
      type: object
      properties:
        type: { type: string, enum: [image_generation] }
        model: { type: string, default: gpt-image-1 }
        parameters:
          type: object
          properties:
            size: { type: string, example: "1024x1024" }
            n: { type: integer, default: 1 }
      required: [type, model]

    ToolAudioTranscription:
      type: object
      properties:
        type: { type: string, enum: [audio_transcription] }
        model: { type: string, default: gpt-audio }
        parameters:
          type: object
          properties:
            language: { type: string, example: "en" }
      required: [type, model]

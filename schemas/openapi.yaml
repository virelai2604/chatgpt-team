openapi: 3.1.0
info:
  title: ChatGPT Team Relay API
  description: |
    Relay-compatible OpenAI API surface (ChatGPT Team architecture).

    This relay behaves like api.openai.com — it accepts any
    `Authorization: Bearer <token>` header, including a dummy
    value when used inside ChatGPT Actions.  The relay forwards
    requests upstream using its internal OPENAI_API_KEY.
  version: 2025-10

servers:
  - url: https://chatgpt-team-relay.onrender.com
    description: Production Relay Server

security:
  - bearerAuth: []

paths:
  /v1/core/ping:
    get:
      tags: [Core]
      summary: Ping
      description: Health check for relay uptime.
      operationId: ping_v1_core_ping_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}

  /v1/chat/completions:
    post:
      tags: [Chat]
      summary: Chat Completions
      description: |
        Core model inference endpoint.
        Mirrors POST /v1/chat/completions from the OpenAI API.
        Handles GPT-family models (GPT-4, GPT-5, O-Series)
        with streaming, tool use, and multimodal content.
      operationId: chat_completions_v1_chat_completions_post
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}

  /v1/models:
    get:
      tags: [Models]
      summary: List Models
      description: |
        Mirrors GET /v1/models.
        Returns all model IDs, owners, and categories
        available through the relay.
      operationId: list_models_v1_models_get
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}

  /v1/files:
    get:
      tags: [Files]
      summary: List Files
      description: List files available in the account or organization.
      operationId: list_files_v1_files_get
      security:
        - bearerAuth: []
      responses:
        '200': { description: Successful Response }
    post:
      tags: [Files]
      summary: Upload File
      description: Upload a file (multipart/form-data supported).
      operationId: upload_file_v1_files_post
      security:
        - bearerAuth: []
      responses:
        '200': { description: Successful Response }

  /v1/files/{file_id}:
    get:
      tags: [Files]
      summary: Retrieve File
      description: Retrieve file metadata.
      operationId: retrieve_file_v1_files__file_id__get
      parameters:
        - name: file_id
          in: path
          required: true
          schema: { type: string }
      security:
        - bearerAuth: []
      responses:
        '200': { description: Successful Response }
    delete:
      tags: [Files]
      summary: Delete File
      description: Delete a file upstream.
      operationId: delete_file_v1_files__file_id__delete
      parameters:
        - name: file_id
          in: path
          required: true
          schema: { type: string }
      security:
        - bearerAuth: []
      responses:
        '200': { description: Successful Response }

  /v1/files/{file_id}/content:
    get:
      tags: [Files]
      summary: Retrieve File Content
      description: Download the raw content of a file.
      operationId: retrieve_file_content_v1_files__file_id__content_get
      parameters:
        - name: file_id
          in: path
          required: true
          schema: { type: string }
      security:
        - bearerAuth: []
      responses:
        '200': { description: Successful Response }

  /v1/vector_stores:
    get:
      tags: [Vector Stores]
      summary: Vector Store Root
      description: |
        GET → list vector stores  
        POST → create a new vector store  
        Mirrors OpenAI /v1/vector_stores.
      operationId: vector_store_root_v1_vector_stores_get
      security:
        - bearerAuth: []
      responses:
        '200': { description: Successful Response }
    post:
      tags: [Vector Stores]
      summary: Create Vector Store
      operationId: vector_store_root_v1_vector_stores_post
      security:
        - bearerAuth: []
      responses:
        '200': { description: Successful Response }

  /v1/vector_stores/{store_id}:
    get:
      tags: [Vector Stores]
      summary: Retrieve Vector Store
      description: Retrieve store details.
      operationId: manage_vector_store_v1_vector_stores__store_id__get
      parameters:
        - name: store_id
          in: path
          required: true
          schema: { type: string }
      security:
        - bearerAuth: []
      responses:
        '200': { description: Successful Response }
    patch:
      tags: [Vector Stores]
      summary: Update Vector Store
      operationId: manage_vector_store_v1_vector_stores__store_id__patch
      parameters:
        - name: store_id
          in: path
          required: true
          schema: { type: string }
      security:
        - bearerAuth: []
      responses:
        '200': { description: Successful Response }
    delete:
      tags: [Vector Stores]
      summary: Delete Vector Store
      operationId: manage_vector_store_v1_vector_stores__store_id__delete
      parameters:
        - name: store_id
          in: path
          required: true
          schema: { type: string }
      security:
        - bearerAuth: []
      responses:
        '200': { description: Successful Response }

  /v1/vector_stores/{store_id}/batches:
    post:
      tags: [Vector Stores]
      summary: Handle Vector Batches
      description: Handles large embedding imports or NDJSON-based batch uploads.
      operationId: handle_vector_batches_v1_vector_stores__store_id__batches_post
      parameters:
        - name: store_id
          in: path
          required: true
          schema: { type: string }
      security:
        - bearerAuth: []
      responses:
        '200': { description: Successful Response }

  /v1/realtime/sessions:
    post:
      tags: [Realtime]
      summary: Create Session
      description: Creates a new realtime session (text, audio, or video).
      operationId: create_session_v1_realtime_sessions_post
      security:
        - bearerAuth: []
      responses:
        '200': { description: Successful Response }

  /v1/realtime/sessions/{session_id}:
    delete:
      tags: [Realtime]
      summary: Delete Session
      description: Terminates a running realtime session.
      operationId: delete_session_v1_realtime_sessions__session_id__delete
      parameters:
        - name: session_id
          in: path
          required: true
          schema: { type: string }
      security:
        - bearerAuth: []
      responses:
        '200': { description: Successful Response }

  /v1/relay/status:
    get:
      tags: [Relay]
      summary: Relay Status
      description: Return current system status and runtime metadata.
      operationId: relay_status_v1_relay_status_get
      responses:
        '200': { description: Successful Response }

  /v1/responses:
    post:
      tags: [Responses]
      summary: Create Response
      description: |
        Main ChatGPT relay endpoint.  
        Forwards user input to OpenAI /v1/responses, handles
        local tool invocation, and supports both streaming and
        non-streaming responses.
      operationId: create_response_v1_responses_post
      security:
        - bearerAuth: []
      responses:
        '200': { description: Successful Response }

  /v1/responses/tools:
    get:
      tags: [Responses]
      summary: List Tools
      description: List all available local tools known to the relay.
      operationId: list_tools_v1_responses_tools_get
      security:
        - bearerAuth: []
      responses:
        '200': { description: Successful Response }

  /v1/responses/tools/{tool_name}:
    post:
      tags: [Responses]
      summary: Call Tool
      description: Manually call a registered tool via API.
      operationId: call_tool_v1_responses_tools__tool_name__post
      parameters:
        - name: tool_name
          in: path
          required: true
          schema: { type: string }
      security:
        - bearerAuth: []
      responses:
        '200': { description: Successful Response }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    HTTPValidationError:
      type: object
      properties:
        detail:
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
    ValidationError:
      type: object
      required: [loc, msg, type]
      properties:
        loc:
          type: array
          items:
            anyOf:
              - type: string
              - type: integer
        msg:
          type: string
        type:
          type: string
